******************************************
******************************************
This unit test, tests the initializeGame()
Testing for number of players initialized into game
Max players allowed in the game 4
Testing initialize game with -1 players...Expected result = -1....TEST SUCCESSFUL
Expecting 0 players, game has 0...TEST SUCCESSFUL
Testing initialize game with 0 players...Expected result = -1....TEST SUCCESSFUL
Expecting 0 players, game has 0...TEST SUCCESSFUL
Testing initialize game with 1 players...Expected result = -1....TEST SUCCESSFUL
Expecting 0 players, game has 0...TEST SUCCESSFUL
Testing initialize game with 2 players...Expected result = 0...TEST SUCCESSFUL
Expecting 2 players, game has 2...TEST SUCCESSFUL
Testing initialize game with 3 players...Expected result = 0...TEST SUCCESSFUL
Expecting 3 players, game has 3...TEST SUCCESSFUL
Testing initialize game with 4 players...Expected result = 0...TEST SUCCESSFUL
Expecting 4 players, game has 4...TEST SUCCESSFUL
Testing initialize game with 5 players...Expected result = -1....TEST SUCCESSFUL
Expecting 0 players, game has 4...TEST FAILED
Testing initialize game with 6 players...Expected result = -1....TEST SUCCESSFUL
Expecting 0 players, game has 4...TEST FAILED

Testing the for loop that checks if there are no duplicate cards in deck
Card number 0 is duplicate...expecting -1...TEST SUCCESSFUL
Card number 1 is duplicate...expecting -1...TEST SUCCESSFUL
Card number 2 is duplicate...expecting -1...TEST SUCCESSFUL
Card number 3 is duplicate...expecting -1...TEST SUCCESSFUL
Card number 4 is duplicate...expecting -1...TEST SUCCESSFUL
Card number 5 is duplicate...expecting -1...TEST SUCCESSFUL
Card number 6 is duplicate...expecting -1...TEST SUCCESSFUL
Card number 7 is duplicate...expecting -1...TEST SUCCESSFUL
Card number 8 is duplicate...expecting -1...TEST SUCCESSFUL

Checking game state supply for 2, 3 and 4 players
Initializing with 2 players
Curse cards expected 10, found 10...TEST SUCCESSFUL
Estate cards expected 8, found 8...TEST SUCCESSFUL
Duchy cards expected 8, found 8...TEST SUCCESSFUL
Province cards expected 8, found 8...TEST SUCCESSFUL
Expected copper 46, found 46...TEST SUCCESSFUL
Expected silver 40, found 40...TEST SUCCESSFUL
Expected gold 30, found 30...TEST SUCCESSFUL
Supply cards expected 10, found 10...TEST SUCCESSFUL
Supply cards expected 10, found 10...TEST SUCCESSFUL
Supply cards expected 10, found 10...TEST SUCCESSFUL
Kingdom victory cards expected 8, found 8...TEST SUCCESSFUL
Supply cards expected 10, found 10...TEST SUCCESSFUL
Supply cards expected 10, found 10...TEST SUCCESSFUL
Supply cards expected 10, found 10...TEST SUCCESSFUL
Supply cards expected 10, found 10...TEST SUCCESSFUL
Supply cards expected 10, found 10...TEST SUCCESSFUL
Kingdom victory cards expected 8, found 8...TEST SUCCESSFUL
Player 0 has 5 cards in deck. Expected 5...TEST SUCCESSFUL
Player 0 had 5 cards in Hand. Expected 5...TEST SUCCESSFUL
Player should have 3 estate and 7 copper to start
Copper found 7...TEST SUCCESSFUL
Estate found 3...TEST SUCCESSFUL
Player 1 has 10 cards in deck. Expected 10...TEST SUCCESSFUL
Player 1 had 0 cards in Hand. Expected 0...TEST SUCCESSFUL
Player should have 3 estate and 7 copper to start
Copper found 7...TEST SUCCESSFUL
Estate found 3...TEST SUCCESSFUL
Validating corrected game state settings
Outpost played = 0...TEST SUCCESSFUL
Phase = 0...TEST SUCCESSFUL
Number of Actions = 1...TEST SUCCESSFUL
Buys = 1...TEST SUCCESSFUL
Played cards = 0...TEST SUCCESSFUL
Player 0 turn...TEST SUCCESSFUL
Initializing with 3 players
Curse cards expected 20, found 20...TEST SUCCESSFUL
Estate cards expected 12, found 12...TEST SUCCESSFUL
Duchy cards expected 12, found 12...TEST SUCCESSFUL
Province cards expected 12, found 12...TEST SUCCESSFUL
Expected copper 39, found 39...TEST SUCCESSFUL
Expected silver 40, found 40...TEST SUCCESSFUL
Expected gold 30, found 30...TEST SUCCESSFUL
Supply cards expected 10, found 10...TEST SUCCESSFUL
Supply cards expected 10, found 10...TEST SUCCESSFUL
Supply cards expected 10, found 10...TEST SUCCESSFUL
Kingdom victory cards expected 12, found 12...TEST SUCCESSFUL
Supply cards expected 10, found 10...TEST SUCCESSFUL
Supply cards expected 10, found 10...TEST SUCCESSFUL
Supply cards expected 10, found 10...TEST SUCCESSFUL
Supply cards expected 10, found 10...TEST SUCCESSFUL
Supply cards expected 10, found 10...TEST SUCCESSFUL
Kingdom victory cards expected 12, found 12...TEST SUCCESSFUL
Player 0 has 5 cards in deck. Expected 5...TEST SUCCESSFUL
Player 0 had 5 cards in Hand. Expected 5...TEST SUCCESSFUL
Player should have 3 estate and 7 copper to start
Copper found 7...TEST SUCCESSFUL
Estate found 3...TEST SUCCESSFUL
Player 1 has 10 cards in deck. Expected 10...TEST SUCCESSFUL
Player 1 had 0 cards in Hand. Expected 0...TEST SUCCESSFUL
Player should have 3 estate and 7 copper to start
Copper found 7...TEST SUCCESSFUL
Estate found 3...TEST SUCCESSFUL
Player 2 has 10 cards in deck. Expected 10...TEST SUCCESSFUL
Player 2 had 0 cards in Hand. Expected 0...TEST SUCCESSFUL
Player should have 3 estate and 7 copper to start
Copper found 7...TEST SUCCESSFUL
Estate found 3...TEST SUCCESSFUL
Validating corrected game state settings
Outpost played = 0...TEST SUCCESSFUL
Phase = 0...TEST SUCCESSFUL
Number of Actions = 1...TEST SUCCESSFUL
Buys = 1...TEST SUCCESSFUL
Played cards = 0...TEST SUCCESSFUL
Player 0 turn...TEST SUCCESSFUL
Initializing with 4 players
Curse cards expected 30, found 30...TEST SUCCESSFUL
Estate cards expected 12, found 12...TEST SUCCESSFUL
Duchy cards expected 12, found 12...TEST SUCCESSFUL
Province cards expected 12, found 12...TEST SUCCESSFUL
Expected copper 32, found 32...TEST SUCCESSFUL
Expected silver 40, found 40...TEST SUCCESSFUL
Expected gold 30, found 30...TEST SUCCESSFUL
Supply cards expected 10, found 10...TEST SUCCESSFUL
Supply cards expected 10, found 10...TEST SUCCESSFUL
Supply cards expected 10, found 10...TEST SUCCESSFUL
Kingdom victory cards expected 12, found 12...TEST SUCCESSFUL
Supply cards expected 10, found 10...TEST SUCCESSFUL
Supply cards expected 10, found 10...TEST SUCCESSFUL
Supply cards expected 10, found 10...TEST SUCCESSFUL
Supply cards expected 10, found 10...TEST SUCCESSFUL
Supply cards expected 10, found 10...TEST SUCCESSFUL
Kingdom victory cards expected 12, found 12...TEST SUCCESSFUL
Player 0 has 5 cards in deck. Expected 5...TEST SUCCESSFUL
Player 0 had 5 cards in Hand. Expected 5...TEST SUCCESSFUL
Player should have 3 estate and 7 copper to start
Copper found 7...TEST SUCCESSFUL
Estate found 3...TEST SUCCESSFUL
Player 1 has 10 cards in deck. Expected 10...TEST SUCCESSFUL
Player 1 had 0 cards in Hand. Expected 0...TEST SUCCESSFUL
Player should have 3 estate and 7 copper to start
Copper found 7...TEST SUCCESSFUL
Estate found 3...TEST SUCCESSFUL
Player 2 has 10 cards in deck. Expected 10...TEST SUCCESSFUL
Player 2 had 0 cards in Hand. Expected 0...TEST SUCCESSFUL
Player should have 3 estate and 7 copper to start
Copper found 7...TEST SUCCESSFUL
Estate found 3...TEST SUCCESSFUL
Player 3 has 10 cards in deck. Expected 10...TEST SUCCESSFUL
Player 3 had 0 cards in Hand. Expected 0...TEST SUCCESSFUL
Player should have 3 estate and 7 copper to start
Copper found 7...TEST SUCCESSFUL
Estate found 3...TEST SUCCESSFUL
Validating corrected game state settings
Outpost played = 0...TEST SUCCESSFUL
Phase = 0...TEST SUCCESSFUL
Number of Actions = 1...TEST SUCCESSFUL
Buys = 1...TEST SUCCESSFUL
Played cards = 0...TEST SUCCESSFUL
Player 0 turn...TEST SUCCESSFUL
Processing file 1 out of 1
File 'dominion.c'
Lines executed:17.60% of 574
Branches executed:16.23% of 419
Taken at least once:14.80% of 419
Calls executed:6.86% of 102
Creating 'dominion.c.gcov'

******************************************
******************************************
This unit test, tests the shuffle()
Game initialized with 2 players
Recording current deck for player 0
1 1 4 4 4 
Attemping to shuffle deck for player 0...expecting success
Current deck size 5...shuffle returned 0...TEST SUCCESSFUL
Checking that returned deck is not in the same sequence...
1 4 4 4 1 TEST SUCCESSFUL
Checking that original and current deck size are the same...TEST SUCCESSFUL
For player 0 drawing cards until deck count < 1
Player 0 deck count 0, shuffling, TEST SUCCESSFUL
Recording current deck for player 1
1 4 4 4 4 4 4 4 1 1 
Attemping to shuffle deck for player 1...expecting success
Current deck size 10...shuffle returned 0...TEST SUCCESSFUL
Checking that returned deck is not in the same sequence...
4 1 4 4 1 4 4 1 4 4 TEST SUCCESSFUL
Checking that original and current deck size are the same...TEST SUCCESSFUL
For player 1 drawing cards until deck count < 1
Player 1 deck count 0, shuffling, TEST SUCCESSFUL

Game initialized with 3 players
Recording current deck for player 0
1 1 4 4 4 
Attemping to shuffle deck for player 0...expecting success
Current deck size 5...shuffle returned 0...TEST SUCCESSFUL
Checking that returned deck is not in the same sequence...
4 1 1 4 4 TEST SUCCESSFUL
Checking that original and current deck size are the same...TEST SUCCESSFUL
For player 0 drawing cards until deck count < 1
Player 0 deck count 0, shuffling, TEST SUCCESSFUL
Recording current deck for player 1
1 4 4 4 4 4 4 4 1 1 
Attemping to shuffle deck for player 1...expecting success
Current deck size 10...shuffle returned 0...TEST SUCCESSFUL
Checking that returned deck is not in the same sequence...
4 4 4 4 1 4 1 4 4 1 TEST SUCCESSFUL
Checking that original and current deck size are the same...TEST SUCCESSFUL
For player 1 drawing cards until deck count < 1
Player 1 deck count 0, shuffling, TEST SUCCESSFUL
Recording current deck for player 2
1 4 4 4 4 4 1 4 4 1 
Attemping to shuffle deck for player 2...expecting success
Current deck size 10...shuffle returned 0...TEST SUCCESSFUL
Checking that returned deck is not in the same sequence...
4 1 1 4 4 1 4 4 4 4 TEST SUCCESSFUL
Checking that original and current deck size are the same...TEST SUCCESSFUL
For player 2 drawing cards until deck count < 1
Player 2 deck count 0, shuffling, TEST SUCCESSFUL

Game initialized with 4 players
Recording current deck for player 0
1 1 4 4 4 
Attemping to shuffle deck for player 0...expecting success
Current deck size 5...shuffle returned 0...TEST SUCCESSFUL
Checking that returned deck is not in the same sequence...
4 1 4 4 1 TEST SUCCESSFUL
Checking that original and current deck size are the same...TEST SUCCESSFUL
For player 0 drawing cards until deck count < 1
Player 0 deck count 0, shuffling, TEST SUCCESSFUL
Recording current deck for player 1
1 4 4 4 4 4 4 4 1 1 
Attemping to shuffle deck for player 1...expecting success
Current deck size 10...shuffle returned 0...TEST SUCCESSFUL
Checking that returned deck is not in the same sequence...
4 1 1 4 4 1 4 4 4 4 TEST SUCCESSFUL
Checking that original and current deck size are the same...TEST SUCCESSFUL
For player 1 drawing cards until deck count < 1
Player 1 deck count 0, shuffling, TEST SUCCESSFUL
Recording current deck for player 2
1 4 4 4 4 4 1 4 4 1 
Attemping to shuffle deck for player 2...expecting success
Current deck size 10...shuffle returned 0...TEST SUCCESSFUL
Checking that returned deck is not in the same sequence...
4 4 4 4 4 1 1 4 1 4 TEST SUCCESSFUL
Checking that original and current deck size are the same...TEST SUCCESSFUL
For player 2 drawing cards until deck count < 1
Player 2 deck count 0, shuffling, TEST SUCCESSFUL
Recording current deck for player 3
4 4 1 4 4 4 4 1 4 1 
Attemping to shuffle deck for player 3...expecting success
Current deck size 10...shuffle returned 0...TEST SUCCESSFUL
Checking that returned deck is not in the same sequence...
1 1 4 4 1 4 4 4 4 4 TEST SUCCESSFUL
Checking that original and current deck size are the same...TEST SUCCESSFUL
For player 3 drawing cards until deck count < 1
Player 3 deck count 0, shuffling, TEST SUCCESSFUL
Processing file 1 out of 1
File 'dominion.c'
Lines executed:17.94% of 574
Branches executed:16.23% of 419
Taken at least once:15.27% of 419
Calls executed:6.86% of 102
Creating 'dominion.c.gcov'

******************************************
******************************************
This unit test, tests the endTurn()
Initialized with 2 players
It is player 0 turn...ending turn...now player's 1 turn...TEST SUCCESSFUL
Validate endTurn returned 0...TEST SUCCESSFUL
New player's hand count = 5?...TEST SUCCESSFUL
Previous player's hand count = 0?... TEST SUCCESSFUL
Validating new players coins...
I count 3 treasure, game has 3...TEST SUCCESSFUL
Validating corrected game state settings
Outpost played = 0...TEST SUCCESSFUL
Phase = 0...TEST SUCCESSFUL
Number of Actions = 1...TEST SUCCESSFUL
Buys = 1...TEST SUCCESSFUL
Played cards = 0...TEST SUCCESSFUL
Player 1 turn...TEST SUCCESSFUL
It is player 1 turn...ending turn...now player's 0 turn...TEST SUCCESSFUL
Validate endTurn returned 0...TEST SUCCESSFUL
New player's hand count = 5?...TEST SUCCESSFUL
Previous player's hand count = 0?... TEST SUCCESSFUL
Validating new players coins...
I count 3 treasure, game has 3...TEST SUCCESSFUL
Validating corrected game state settings
Outpost played = 0...TEST SUCCESSFUL
Phase = 0...TEST SUCCESSFUL
Number of Actions = 1...TEST SUCCESSFUL
Buys = 1...TEST SUCCESSFUL
Played cards = 0...TEST SUCCESSFUL
Player 0 turn...TEST SUCCESSFUL
It is player 0 turn...ending turn...now player's 1 turn...TEST SUCCESSFUL
Validate endTurn returned 0...TEST SUCCESSFUL
New player's hand count = 5?...TEST SUCCESSFUL
Previous player's hand count = 0?... TEST SUCCESSFUL
Validating new players coins...
I count 4 treasure, game has 4...TEST SUCCESSFUL
Validating corrected game state settings
Outpost played = 0...TEST SUCCESSFUL
Phase = 0...TEST SUCCESSFUL
Number of Actions = 1...TEST SUCCESSFUL
Buys = 1...TEST SUCCESSFUL
Played cards = 0...TEST SUCCESSFUL
Player 1 turn...TEST SUCCESSFUL
Initialized with 3 players
It is player 0 turn...ending turn...now player's 1 turn...TEST SUCCESSFUL
Validate endTurn returned 0...TEST SUCCESSFUL
New player's hand count = 5?...TEST SUCCESSFUL
Previous player's hand count = 0?... TEST SUCCESSFUL
Validating new players coins...
I count 3 treasure, game has 3...TEST SUCCESSFUL
Validating corrected game state settings
Outpost played = 0...TEST SUCCESSFUL
Phase = 0...TEST SUCCESSFUL
Number of Actions = 1...TEST SUCCESSFUL
Buys = 1...TEST SUCCESSFUL
Played cards = 0...TEST SUCCESSFUL
Player 1 turn...TEST SUCCESSFUL
It is player 1 turn...ending turn...now player's 2 turn...TEST SUCCESSFUL
Validate endTurn returned 0...TEST SUCCESSFUL
New player's hand count = 5?...TEST SUCCESSFUL
Previous player's hand count = 0?... TEST SUCCESSFUL
Validating new players coins...
I count 3 treasure, game has 3...TEST SUCCESSFUL
Validating corrected game state settings
Outpost played = 0...TEST SUCCESSFUL
Phase = 0...TEST SUCCESSFUL
Number of Actions = 1...TEST SUCCESSFUL
Buys = 1...TEST SUCCESSFUL
Played cards = 0...TEST SUCCESSFUL
Player 2 turn...TEST SUCCESSFUL
It is player 2 turn...ending turn...now player's 0 turn...TEST SUCCESSFUL
Validate endTurn returned 0...TEST SUCCESSFUL
New player's hand count = 5?...TEST SUCCESSFUL
Previous player's hand count = 0?... TEST SUCCESSFUL
Validating new players coins...
I count 3 treasure, game has 3...TEST SUCCESSFUL
Validating corrected game state settings
Outpost played = 0...TEST SUCCESSFUL
Phase = 0...TEST SUCCESSFUL
Number of Actions = 1...TEST SUCCESSFUL
Buys = 1...TEST SUCCESSFUL
Played cards = 0...TEST SUCCESSFUL
Player 0 turn...TEST SUCCESSFUL
It is player 0 turn...ending turn...now player's 1 turn...TEST SUCCESSFUL
Validate endTurn returned 0...TEST SUCCESSFUL
New player's hand count = 5?...TEST SUCCESSFUL
Previous player's hand count = 0?... TEST SUCCESSFUL
Validating new players coins...
I count 4 treasure, game has 4...TEST SUCCESSFUL
Validating corrected game state settings
Outpost played = 0...TEST SUCCESSFUL
Phase = 0...TEST SUCCESSFUL
Number of Actions = 1...TEST SUCCESSFUL
Buys = 1...TEST SUCCESSFUL
Played cards = 0...TEST SUCCESSFUL
Player 1 turn...TEST SUCCESSFUL
Initialized with 4 players
It is player 0 turn...ending turn...now player's 1 turn...TEST SUCCESSFUL
Validate endTurn returned 0...TEST SUCCESSFUL
New player's hand count = 5?...TEST SUCCESSFUL
Previous player's hand count = 0?... TEST SUCCESSFUL
Validating new players coins...
I count 3 treasure, game has 3...TEST SUCCESSFUL
Validating corrected game state settings
Outpost played = 0...TEST SUCCESSFUL
Phase = 0...TEST SUCCESSFUL
Number of Actions = 1...TEST SUCCESSFUL
Buys = 1...TEST SUCCESSFUL
Played cards = 0...TEST SUCCESSFUL
Player 1 turn...TEST SUCCESSFUL
It is player 1 turn...ending turn...now player's 2 turn...TEST SUCCESSFUL
Validate endTurn returned 0...TEST SUCCESSFUL
New player's hand count = 5?...TEST SUCCESSFUL
Previous player's hand count = 0?... TEST SUCCESSFUL
Validating new players coins...
I count 3 treasure, game has 3...TEST SUCCESSFUL
Validating corrected game state settings
Outpost played = 0...TEST SUCCESSFUL
Phase = 0...TEST SUCCESSFUL
Number of Actions = 1...TEST SUCCESSFUL
Buys = 1...TEST SUCCESSFUL
Played cards = 0...TEST SUCCESSFUL
Player 2 turn...TEST SUCCESSFUL
It is player 2 turn...ending turn...now player's 3 turn...TEST SUCCESSFUL
Validate endTurn returned 0...TEST SUCCESSFUL
New player's hand count = 5?...TEST SUCCESSFUL
Previous player's hand count = 0?... TEST SUCCESSFUL
Validating new players coins...
I count 3 treasure, game has 3...TEST SUCCESSFUL
Validating corrected game state settings
Outpost played = 0...TEST SUCCESSFUL
Phase = 0...TEST SUCCESSFUL
Number of Actions = 1...TEST SUCCESSFUL
Buys = 1...TEST SUCCESSFUL
Played cards = 0...TEST SUCCESSFUL
Player 3 turn...TEST SUCCESSFUL
It is player 3 turn...ending turn...now player's 0 turn...TEST SUCCESSFUL
Validate endTurn returned 0...TEST SUCCESSFUL
New player's hand count = 5?...TEST SUCCESSFUL
Previous player's hand count = 0?... TEST SUCCESSFUL
Validating new players coins...
I count 3 treasure, game has 3...TEST SUCCESSFUL
Validating corrected game state settings
Outpost played = 0...TEST SUCCESSFUL
Phase = 0...TEST SUCCESSFUL
Number of Actions = 1...TEST SUCCESSFUL
Buys = 1...TEST SUCCESSFUL
Played cards = 0...TEST SUCCESSFUL
Player 0 turn...TEST SUCCESSFUL
It is player 0 turn...ending turn...now player's 1 turn...TEST SUCCESSFUL
Validate endTurn returned 0...TEST SUCCESSFUL
New player's hand count = 5?...TEST SUCCESSFUL
Previous player's hand count = 0?... TEST SUCCESSFUL
Validating new players coins...
I count 4 treasure, game has 4...TEST SUCCESSFUL
Validating corrected game state settings
Outpost played = 0...TEST SUCCESSFUL
Phase = 0...TEST SUCCESSFUL
Number of Actions = 1...TEST SUCCESSFUL
Buys = 1...TEST SUCCESSFUL
Played cards = 0...TEST SUCCESSFUL
Player 1 turn...TEST SUCCESSFUL
Processing file 1 out of 1
File 'dominion.c'
Lines executed:21.78% of 574
Branches executed:17.66% of 419
Taken at least once:16.71% of 419
Calls executed:9.80% of 102
Creating 'dominion.c.gcov'

******************************************
******************************************
This unit test, tests the isGameOver()
Testing base game after initialization...game should not be over...TEST SUCCESSFUL
Ending one turn... game should not be over...TEST SUCCESSFUL
Testing first if provinces are all gone, game is over...TEST SUCCESSFUL
Going through the supply pile and set 2 cards to 0 every other card
Game should never be over, setting all supply piles to 5
5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 
Set supply card Curse and Duchy to 0...TEST SUCCESSFUL
Set supply card Estate and Province to 0...TEST SUCCESSFUL
Set supply card Duchy and Copper to 0...TEST SUCCESSFUL
Set supply card Province and Silver to 0...TEST SUCCESSFUL
Set supply card Copper and Gold to 0...TEST SUCCESSFUL
Set supply card Silver and Adventurer to 0...TEST SUCCESSFUL
Set supply card Gold and Council Room to 0...TEST SUCCESSFUL
Set supply card Adventurer and Feast to 0...TEST SUCCESSFUL
Set supply card Council Room and Gardens to 0...TEST SUCCESSFUL
Set supply card Feast and Mine to 0...TEST SUCCESSFUL
Set supply card Gardens and Remodel to 0...TEST SUCCESSFUL
Set supply card Mine and Smithy to 0...TEST SUCCESSFUL
Set supply card Remodel and Village to 0...TEST SUCCESSFUL
Set supply card Smithy and Baron to 0...TEST SUCCESSFUL
Set supply card Village and Great Hall to 0...TEST SUCCESSFUL
Set supply card Baron and Minion to 0...TEST SUCCESSFUL
Set supply card Great Hall and Steward to 0...TEST SUCCESSFUL
Set supply card Minion and Tribute to 0...TEST SUCCESSFUL
Set supply card Steward and Ambassador to 0...TEST SUCCESSFUL
Set supply card Tribute and Cutpurse to 0...TEST SUCCESSFUL
Set supply card Ambassador and Embargo to 0...TEST SUCCESSFUL
Set supply card Cutpurse and Outpost to 0...TEST SUCCESSFUL
Set supply card Embargo and Salvager to 0...TEST SUCCESSFUL
Set supply card Outpost and Sea Hag to 0...TEST SUCCESSFUL
Now setting sets of 3 cards to 0, every other card
Game should be over each time
Set supply card Curse, Duchy and Copper to 0...TEST SUCCESSFUL
Set supply card Estate, Province and Silver to 0...TEST SUCCESSFUL
Set supply card Duchy, Copper and Gold to 0...TEST SUCCESSFUL
Set supply card Province, Silver and Adventurer to 0...TEST SUCCESSFUL
Set supply card Copper, Gold and Council Room to 0...TEST SUCCESSFUL
Set supply card Silver, Adventurer and Feast to 0...TEST SUCCESSFUL
Set supply card Gold, Council Room and Gardens to 0...TEST SUCCESSFUL
Set supply card Adventurer, Feast and Mine to 0...TEST SUCCESSFUL
Set supply card Council Room, Gardens and Remodel to 0...TEST SUCCESSFUL
Set supply card Feast, Mine and Smithy to 0...TEST SUCCESSFUL
Set supply card Gardens, Remodel and Village to 0...TEST SUCCESSFUL
Set supply card Mine, Smithy and Baron to 0...TEST SUCCESSFUL
Set supply card Remodel, Village and Great Hall to 0...TEST SUCCESSFUL
Set supply card Smithy, Baron and Minion to 0...TEST SUCCESSFUL
Set supply card Village, Great Hall and Steward to 0...TEST SUCCESSFUL
Set supply card Baron, Minion and Tribute to 0...TEST SUCCESSFUL
Set supply card Great Hall, Steward and Ambassador to 0...TEST SUCCESSFUL
Set supply card Minion, Tribute and Cutpurse to 0...TEST SUCCESSFUL
Set supply card Steward, Ambassador and Embargo to 0...TEST SUCCESSFUL
Set supply card Tribute, Cutpurse and Outpost to 0...TEST SUCCESSFUL
Set supply card Ambassador, Embargo and Salvager to 0...TEST SUCCESSFUL
Set supply card Cutpurse, Outpost and Sea Hag to 0...TEST FAILED
Now setting sets of 3 cards to -1, every other card
Game should be over each time
Set supply card Curse, Duchy and Copper to -1...TEST FAILED
Set supply card Estate, Province and Silver to -1...TEST FAILED
Set supply card Duchy, Copper and Gold to -1...TEST FAILED
Set supply card Province, Silver and Adventurer to -1...TEST FAILED
Set supply card Copper, Gold and Council Room to -1...TEST FAILED
Set supply card Silver, Adventurer and Feast to -1...TEST FAILED
Set supply card Gold, Council Room and Gardens to -1...TEST FAILED
Set supply card Adventurer, Feast and Mine to -1...TEST FAILED
Set supply card Council Room, Gardens and Remodel to -1...TEST FAILED
Set supply card Feast, Mine and Smithy to -1...TEST FAILED
Set supply card Gardens, Remodel and Village to -1...TEST FAILED
Set supply card Mine, Smithy and Baron to -1...TEST FAILED
Set supply card Remodel, Village and Great Hall to -1...TEST FAILED
Set supply card Smithy, Baron and Minion to -1...TEST FAILED
Set supply card Village, Great Hall and Steward to -1...TEST FAILED
Set supply card Baron, Minion and Tribute to -1...TEST FAILED
Set supply card Great Hall, Steward and Ambassador to -1...TEST FAILED
Set supply card Minion, Tribute and Cutpurse to -1...TEST FAILED
Set supply card Steward, Ambassador and Embargo to -1...TEST FAILED
Set supply card Tribute, Cutpurse and Outpost to -1...TEST FAILED
Set supply card Ambassador, Embargo and Salvager to -1...TEST FAILED
Set supply card Cutpurse, Outpost and Sea Hag to -1...TEST FAILED
Now setting sets of 3 cards to 1, every other card
Game should not be over each time
Set supply card Curse, Duchy and Copper to 1...TEST SUCCESSFUL
Set supply card Estate, Province and Silver to 1...TEST SUCCESSFUL
Set supply card Duchy, Copper and Gold to 1...TEST SUCCESSFUL
Set supply card Province, Silver and Adventurer to 1...TEST SUCCESSFUL
Set supply card Copper, Gold and Council Room to 1...TEST SUCCESSFUL
Set supply card Silver, Adventurer and Feast to 1...TEST SUCCESSFUL
Set supply card Gold, Council Room and Gardens to 1...TEST SUCCESSFUL
Set supply card Adventurer, Feast and Mine to 1...TEST SUCCESSFUL
Set supply card Council Room, Gardens and Remodel to 1...TEST SUCCESSFUL
Set supply card Feast, Mine and Smithy to 1...TEST SUCCESSFUL
Set supply card Gardens, Remodel and Village to 1...TEST SUCCESSFUL
Set supply card Mine, Smithy and Baron to 1...TEST SUCCESSFUL
Set supply card Remodel, Village and Great Hall to 1...TEST SUCCESSFUL
Set supply card Smithy, Baron and Minion to 1...TEST SUCCESSFUL
Set supply card Village, Great Hall and Steward to 1...TEST SUCCESSFUL
Set supply card Baron, Minion and Tribute to 1...TEST SUCCESSFUL
Set supply card Great Hall, Steward and Ambassador to 1...TEST SUCCESSFUL
Set supply card Minion, Tribute and Cutpurse to 1...TEST SUCCESSFUL
Set supply card Steward, Ambassador and Embargo to 1...TEST SUCCESSFUL
Set supply card Tribute, Cutpurse and Outpost to 1...TEST SUCCESSFUL
Set supply card Ambassador, Embargo and Salvager to 1...TEST SUCCESSFUL
Set supply card Cutpurse, Outpost and Sea Hag to 1...TEST SUCCESSFUL
Now setting sets of 4 cards to 0, every other card
Game should be over each time
Set supply card Curse, Duchy, Copper and Gold to 0...TEST SUCCESSFUL
Set supply card Estate, Province, Silver and Adventurer to 0...TEST SUCCESSFUL
Set supply card Duchy, Copper, Gold and Council Room to 0...TEST SUCCESSFUL
Set supply card Province, Silver, Adventurer and Feast to 0...TEST SUCCESSFUL
Set supply card Copper, Gold, Council Room and Gardens to 0...TEST SUCCESSFUL
Set supply card Silver, Adventurer, Feast and Mine to 0...TEST SUCCESSFUL
Set supply card Gold, Council Room, Gardens and Remodel to 0...TEST SUCCESSFUL
Set supply card Adventurer, Feast, Mine and Smithy to 0...TEST SUCCESSFUL
Set supply card Council Room, Gardens, Remodel and Village to 0...TEST SUCCESSFUL
Set supply card Feast, Mine, Smithy and Baron to 0...TEST SUCCESSFUL
Set supply card Gardens, Remodel, Village and Great Hall to 0...TEST SUCCESSFUL
Set supply card Mine, Smithy, Baron and Minion to 0...TEST SUCCESSFUL
Set supply card Remodel, Village, Great Hall and Steward to 0...TEST SUCCESSFUL
Set supply card Smithy, Baron, Minion and Tribute to 0...TEST SUCCESSFUL
Set supply card Village, Great Hall, Steward and Ambassador to 0...TEST SUCCESSFUL
Set supply card Baron, Minion, Tribute and Cutpurse to 0...TEST SUCCESSFUL
Set supply card Great Hall, Steward, Ambassador and Embargo to 0...TEST SUCCESSFUL
Set supply card Minion, Tribute, Cutpurse and Outpost to 0...TEST SUCCESSFUL
Set supply card Steward, Ambassador, Embargo and Salvager to 0...TEST SUCCESSFUL
Set supply card Tribute, Cutpurse, Outpost and Sea Hag to 0...TEST SUCCESSFUL
Processing file 1 out of 1
File 'dominion.c'
Lines executed:23.52% of 574
Branches executed:19.57% of 419
Taken at least once:18.62% of 419
Calls executed:9.80% of 102
Creating 'dominion.c.gcov'

******************************************
******************************************
TEST SUCCESSFUL
TEST SUCCESSFUL
Unit test for the playSmithy function, with 2 players
Player 0 current cards in hand 5
Copper Copper Copper Copper Estate 
Player 0 current cards in deck 5
Estate Estate Copper Copper Copper 
First we'll give ourselves the smithy card
Smithy added
Player 0 current cards in hand 6
Copper Copper Copper Copper Estate Smithy 
Playing smithy, return = 0...TEST SUCCESSFUL
Player 0, first 5 cards should still be the same? ...
Card # 5 should be Estate and is Copper
TEST FAILED
Player 0 current cards in hand 8
Copper Copper Copper Copper Copper Estate Copper Copper 
Player 0 has 8 cards in hand and should have 8...TEST SUCCESSFUL
Should only be 1 card in playedCard pile 'smithy'
Played pile has 2...TEST FAILED
Played pile contains: Smithy Estate 
Player 0 deck count should be 2, deck count now 1...TEST FAILED
Testing other players hands and handcounts.
Player 1 handCount was 0, now is 0...TEST SUCCESSFUL
Player 1 deckCount was 10, now is 10...TEST SUCCESSFUL
Validating hands cards are the same for player 1...TEST SUCCESSFUL
Validating deck cards are the same for player 1...TEST SUCCESSFUL
Player 1 discardCound was 0, now is 0...TEST SUCCESSFUL
Played cards should be different between the two games...TEST SUCCESSFUL
Outposts is 0, was 0, mod:0... TEST SUCCESSFUL
Outpost Turn is 0 was 0, mod:0...TEST SUCCESSFUL
Turn is 0 was 0, mod:0..TEST SUCCESSFUL
Phase is 0 was 0, mod:0...TEST SUCCESSFUL
NumActions is 1 was 1, mod:0..TEST SUCCESSFUL
Coins is 4 was 4, mod:0...TEST SUCCESSFUL
Numbuys is 1 was 1, mod0...TEST SUCCESSFUL
Validating treasure map has not changed...TEST SUCCESSFUL
Validating embargo tokens has not changed...TEST SUCCESSFUL
******************************************
******************************************
TEST SUCCESSFUL
TEST SUCCESSFUL
Unit test for the playSmithy function, with 3 players
Player 0 current cards in hand 5
Copper Copper Copper Copper Estate 
Player 0 current cards in deck 5
Estate Estate Copper Copper Copper 
First we'll give ourselves the smithy card
Smithy added
Player 0 current cards in hand 6
Copper Copper Copper Copper Estate Smithy 
Playing smithy, return = 0...TEST SUCCESSFUL
Player 0, first 5 cards should still be the same? ...
Card # 5 should be Estate and is Copper
TEST FAILED
Player 0 current cards in hand 8
Copper Copper Copper Copper Copper Estate Copper Copper 
Player 0 has 8 cards in hand and should have 8...TEST SUCCESSFUL
Should only be 1 card in playedCard pile 'smithy'
Played pile has 2...TEST FAILED
Played pile contains: Smithy Estate 
Player 0 deck count should be 2, deck count now 1...TEST FAILED
Testing other players hands and handcounts.
Player 1 handCount was 0, now is 0...TEST SUCCESSFUL
Player 1 deckCount was 10, now is 10...TEST SUCCESSFUL
Validating hands cards are the same for player 1...TEST SUCCESSFUL
Validating deck cards are the same for player 1...TEST SUCCESSFUL
Player 1 discardCound was 0, now is 0...TEST SUCCESSFUL
Player 2 handCount was 0, now is 0...TEST SUCCESSFUL
Player 2 deckCount was 10, now is 10...TEST SUCCESSFUL
Validating hands cards are the same for player 2...TEST SUCCESSFUL
Validating deck cards are the same for player 2...TEST SUCCESSFUL
Player 2 discardCound was 0, now is 0...TEST SUCCESSFUL
Played cards should be different between the two games...TEST SUCCESSFUL
Outposts is 0, was 0, mod:0... TEST SUCCESSFUL
Outpost Turn is 0 was 0, mod:0...TEST SUCCESSFUL
Turn is 0 was 0, mod:0..TEST SUCCESSFUL
Phase is 0 was 0, mod:0...TEST SUCCESSFUL
NumActions is 1 was 1, mod:0..TEST SUCCESSFUL
Coins is 4 was 4, mod:0...TEST SUCCESSFUL
Numbuys is 1 was 1, mod0...TEST SUCCESSFUL
Validating treasure map has not changed...TEST SUCCESSFUL
Validating embargo tokens has not changed...TEST SUCCESSFUL
******************************************
******************************************
TEST SUCCESSFUL
TEST SUCCESSFUL
Unit test for the playSmithy function, with 4 players
Player 0 current cards in hand 5
Copper Copper Copper Copper Estate 
Player 0 current cards in deck 5
Estate Estate Copper Copper Copper 
First we'll give ourselves the smithy card
Smithy added
Player 0 current cards in hand 6
Copper Copper Copper Copper Estate Smithy 
Playing smithy, return = 0...TEST SUCCESSFUL
Player 0, first 5 cards should still be the same? ...
Card # 5 should be Estate and is Copper
TEST FAILED
Player 0 current cards in hand 8
Copper Copper Copper Copper Copper Estate Copper Copper 
Player 0 has 8 cards in hand and should have 8...TEST SUCCESSFUL
Should only be 1 card in playedCard pile 'smithy'
Played pile has 2...TEST FAILED
Played pile contains: Smithy Estate 
Player 0 deck count should be 2, deck count now 1...TEST FAILED
Testing other players hands and handcounts.
Player 1 handCount was 0, now is 0...TEST SUCCESSFUL
Player 1 deckCount was 10, now is 10...TEST SUCCESSFUL
Validating hands cards are the same for player 1...TEST SUCCESSFUL
Validating deck cards are the same for player 1...TEST SUCCESSFUL
Player 1 discardCound was 0, now is 0...TEST SUCCESSFUL
Player 2 handCount was 0, now is 0...TEST SUCCESSFUL
Player 2 deckCount was 10, now is 10...TEST SUCCESSFUL
Validating hands cards are the same for player 2...TEST SUCCESSFUL
Validating deck cards are the same for player 2...TEST SUCCESSFUL
Player 2 discardCound was 0, now is 0...TEST SUCCESSFUL
Player 3 handCount was 0, now is 0...TEST SUCCESSFUL
Player 3 deckCount was 10, now is 10...TEST SUCCESSFUL
Validating hands cards are the same for player 3...TEST SUCCESSFUL
Validating deck cards are the same for player 3...TEST SUCCESSFUL
Player 3 discardCound was 0, now is 0...TEST SUCCESSFUL
Played cards should be different between the two games...TEST SUCCESSFUL
Outposts is 0, was 0, mod:0... TEST SUCCESSFUL
Outpost Turn is 0 was 0, mod:0...TEST SUCCESSFUL
Turn is 0 was 0, mod:0..TEST SUCCESSFUL
Phase is 0 was 0, mod:0...TEST SUCCESSFUL
NumActions is 1 was 1, mod:0..TEST SUCCESSFUL
Coins is 4 was 4, mod:0...TEST SUCCESSFUL
Numbuys is 1 was 1, mod0...TEST SUCCESSFUL
Validating treasure map has not changed...TEST SUCCESSFUL
Validating embargo tokens has not changed...TEST SUCCESSFUL
Processing file 1 out of 1
File 'dominion.c'
Lines executed:26.48% of 574
Branches executed:21.48% of 419
Taken at least once:19.81% of 419
Calls executed:12.75% of 102
Creating 'dominion.c.gcov'

******************************************
******************************************
Unit test for the playAdventurer function

First we'll give ourselves the Adventurer card
Current cards in player 0 hand 5
Copper Copper Copper Copper Estate 
Current treasure cards in player 0 hand 4
Adventurer added
Current cards in player 0 hand 6
Copper Copper Copper Copper Estate Adventurer 
Current treasure cards in player 0 hand 4
Player 0 current deck count is 5 containing
Estate Estate Copper Copper Copper 
Playing adventurer, return = 0...TEST SUCCESSFUL
Current cards in player 0 hand 9
Copper Copper Copper Copper Estate Adventurer Copper Copper Curse 
Current treasure cards in player 0 hand 6
Should have +2 treasure cards
Had 4 treasure cards, found 6 ....TEST SUCCESSFUL
Had 6 handCount, now have 9 handCount, expect +2 (adventurer is not discarded in the code)
TEST FAILED
Player 0 current deck count is 3 containing
Estate Estate Copper 

Ending turn twice to get back to player 0.
First we'll give ourselves the Adventurer card
Current cards in player 0 hand 5
Copper Estate Estate Estate Copper 
Current treasure cards in player 0 hand 2
Adventurer added
Current cards in player 0 hand 6
Copper Estate Estate Estate Copper Adventurer 
Current treasure cards in player 0 hand 2
Player 0 current deck count is 7 containing
Copper Copper Adventurer Copper Copper Copper Curse 
Playing adventurer, return = 0...TEST SUCCESSFUL
Player 0 current deck count is 4 containing
Copper Copper Adventurer Copper 
Current cards in player 0 hand 9
Copper Estate Estate Estate Copper Adventurer Copper Copper (null) 
Current treasure cards in player 0 hand 4
Should have +2 treasure cards
Had 4 treasure cards, found 6 ....TEST SUCCESSFUL
Had 9 handCount, now have 9 handCount, expect +2 (adventurer is not discarded in the code)
TEST FAILED
Player 0 current deck count is 4 containing
Copper Copper Adventurer Copper 

Ending turn twice to get back to player 0.
First we'll give ourselves the Adventurer card
Current cards in player 0 hand 5
Copper Adventurer Copper Copper (null) 
Current treasure cards in player 0 hand 3
Adventurer added
Current cards in player 0 hand 6
Copper Adventurer Copper Copper (null) Adventurer 
Current treasure cards in player 0 hand 3
Player 0 current deck count is 9 containing
Estate Adventurer Estate Estate Copper Curse Copper Copper Copper 
Playing adventurer, return = 0...TEST SUCCESSFUL
Player 0 current deck count is 7 containing
Estate Adventurer Estate Estate Copper Curse Copper 
Current cards in player 0 hand 9
Copper Adventurer Copper Copper (null) Adventurer Copper Copper (null) 
Current treasure cards in player 0 hand 5
Should have +2 treasure cards
Had 5 treasure cards, found 6 ....TEST FAILED
Had 9 handCount, now have 9 handCount, expect +2 (adventurer is not discarded in the code)
TEST FAILED
Player 0 current deck count is 7 containing
Estate Adventurer Estate Estate Copper Curse Copper 

Ending turn twice to get back to player 0.
First we'll give ourselves the Adventurer card
Current cards in player 0 hand 5
Copper Curse Copper Estate Estate 
Current treasure cards in player 0 hand 2
Adventurer added
Current cards in player 0 hand 6
Copper Curse Copper Estate Estate Adventurer 
Current treasure cards in player 0 hand 2
Player 0 current deck count is 2 containing
Estate Adventurer 
Playing adventurer, return = 0...TEST SUCCESSFUL
Player 0 current deck count is 5 containing
Adventurer (null) Copper Copper Copper 
Current cards in player 0 hand 9
Copper Curse Copper Estate Estate Adventurer Copper Copper (null) 
Current treasure cards in player 0 hand 4
Should have +2 treasure cards
Had 4 treasure cards, found 6 ....TEST SUCCESSFUL
Had 9 handCount, now have 9 handCount, expect +2 (adventurer is not discarded in the code)
TEST FAILED
Player 0 current deck count is 5 containing
Adventurer (null) Copper Copper Copper 

Ending turn twice to get back to player 0.
First we'll give ourselves the Adventurer card
Current cards in player 0 hand 5
Copper Copper Copper (null) Adventurer 
Current treasure cards in player 0 hand 3
Adventurer added
Current cards in player 0 hand 6
Copper Copper Copper (null) Adventurer Adventurer 
Current treasure cards in player 0 hand 3
Player 0 current deck count is 0 containing

Playing adventurer, return = 0...TEST SUCCESSFUL
Player 0 current deck count is 10 containing
Adventurer Adventurer Copper (null) Copper Estate Estate (null) Curse Estate 
Current cards in player 0 hand 9
Copper Copper Copper (null) Adventurer Adventurer Copper Copper (null) 
Current treasure cards in player 0 hand 5
Should have +2 treasure cards
Had 5 treasure cards, found 6 ....TEST FAILED
Had 9 handCount, now have 9 handCount, expect +2 (adventurer is not discarded in the code)
TEST FAILED
Player 0 current deck count is 10 containing
Adventurer Adventurer Copper (null) Copper Estate Estate (null) Curse Estate 

Ending turn twice to get back to player 0.
First we'll give ourselves the Adventurer card
Current cards in player 0 hand 5
Estate Curse (null) Estate Estate 
Current treasure cards in player 0 hand 0
Adventurer added
Current cards in player 0 hand 6
Estate Curse (null) Estate Estate Adventurer 
Current treasure cards in player 0 hand 0
Player 0 current deck count is 5 containing
Adventurer Adventurer Copper (null) Copper 
Playing adventurer, return = 0...TEST SUCCESSFUL
Player 0 current deck count is 2 containing
Adventurer Adventurer 
Current cards in player 0 hand 9
Estate Curse (null) Estate Estate Adventurer Copper Copper (null) 
Current treasure cards in player 0 hand 2
Should have +2 treasure cards
Had 2 treasure cards, found 6 ....TEST FAILED
Had 9 handCount, now have 9 handCount, expect +2 (adventurer is not discarded in the code)
TEST FAILED
Player 0 current deck count is 2 containing
Adventurer Adventurer 

Ending turn twice to get back to player 0.
First we'll give ourselves the Adventurer card
Current cards in player 0 hand 5
Adventurer Adventurer Copper Adventurer Copper 
Current treasure cards in player 0 hand 2
Adventurer added
Current cards in player 0 hand 6
Adventurer Adventurer Copper Adventurer Copper Adventurer 
Current treasure cards in player 0 hand 2
Player 0 current deck count is 17 containing
Adventurer (null) Adventurer Copper Copper Copper Copper (null) Curse Copper Estate Adventurer (null) (null) Estate Estate (null) 
Playing adventurer, return = 0...TEST SUCCESSFUL
Player 0 current deck count is 6 containing
Adventurer (null) Adventurer Copper Copper Copper 
Current cards in player 0 hand 9
Adventurer Adventurer Copper Adventurer Copper Adventurer Copper Copper (null) 
Current treasure cards in player 0 hand 4
Should have +2 treasure cards
Had 4 treasure cards, found 6 ....TEST SUCCESSFUL
Had 9 handCount, now have 9 handCount, expect +2 (adventurer is not discarded in the code)
TEST FAILED
Player 0 current deck count is 6 containing
Adventurer (null) Adventurer Copper Copper Copper 

Ending turn twice to get back to player 0.
First we'll give ourselves the Adventurer card
Current cards in player 0 hand 5
Copper Copper Copper Adventurer (null) 
Current treasure cards in player 0 hand 3
Adventurer added
Current cards in player 0 hand 6
Copper Copper Copper Adventurer (null) Adventurer 
Current treasure cards in player 0 hand 3
Player 0 current deck count is 1 containing
Adventurer 
Playing adventurer, return = 0...TEST SUCCESSFUL
Player 0 current deck count is 11 containing
(null) (null) Copper (null) Copper Curse Adventurer Estate Adventurer (null) Estate 
Current cards in player 0 hand 9
Copper Copper Copper Adventurer (null) Adventurer Copper Copper (null) 
Current treasure cards in player 0 hand 5
Should have +2 treasure cards
Had 5 treasure cards, found 6 ....TEST FAILED
Had 9 handCount, now have 9 handCount, expect +2 (adventurer is not discarded in the code)
TEST FAILED
Player 0 current deck count is 11 containing
(null) (null) Copper (null) Copper Curse Adventurer Estate Adventurer (null) Estate 

Ending turn twice to get back to player 0.
First we'll give ourselves the Adventurer card
Current cards in player 0 hand 5
Estate (null) Adventurer Estate Adventurer 
Current treasure cards in player 0 hand 0
Adventurer added
Current cards in player 0 hand 6
Estate (null) Adventurer Estate Adventurer Adventurer 
Current treasure cards in player 0 hand 0
Player 0 current deck count is 6 containing
(null) (null) Copper (null) Copper Curse 
Playing adventurer, return = 0...TEST SUCCESSFUL
Player 0 current deck count is 2 containing
(null) (null) 
Current cards in player 0 hand 9
Estate (null) Adventurer Estate Adventurer Adventurer Copper Copper (null) 
Current treasure cards in player 0 hand 2
Should have +2 treasure cards
Had 2 treasure cards, found 6 ....TEST FAILED
Had 9 handCount, now have 9 handCount, expect +2 (adventurer is not discarded in the code)
TEST FAILED
Player 0 current deck count is 2 containing
(null) (null) 

Ending turn twice to get back to player 0.
First we'll give ourselves the Adventurer card
Current cards in player 0 hand 5
(null) (null) Copper Adventurer Estate 
Current treasure cards in player 0 hand 1
Adventurer added
Current cards in player 0 hand 6
(null) (null) Copper Adventurer Estate Adventurer 
Current treasure cards in player 0 hand 1
Player 0 current deck count is 23 containing
Adventurer Copper (null) (null) Copper Adventurer Estate Copper Copper Adventurer Copper Adventurer Curse Adventurer Adventurer (null) Adventurer (null) Estate Copper (null) Adventurer (null) 
Playing adventurer, return = 0...TEST SUCCESSFUL
Player 0 current deck count is 10 containing
Adventurer Copper (null) (null) Copper Adventurer Estate Copper Copper Adventurer 
Current cards in player 0 hand 9
(null) (null) Copper Adventurer Estate Adventurer Copper Copper (null) 
Current treasure cards in player 0 hand 3
Should have +2 treasure cards
Had 3 treasure cards, found 6 ....TEST FAILED
Had 9 handCount, now have 9 handCount, expect +2 (adventurer is not discarded in the code)
TEST FAILED
Player 0 current deck count is 10 containing
Adventurer Copper (null) (null) Copper Adventurer Estate Copper Copper Adventurer 

Ending turn twice to get back to player 0.
First we'll give ourselves the Adventurer card
Current cards in player 0 hand 5
Adventurer Copper Copper Estate Adventurer 
Current treasure cards in player 0 hand 2
Adventurer added
Current cards in player 0 hand 6
Adventurer Copper Copper Estate Adventurer Adventurer 
Current treasure cards in player 0 hand 2
Player 0 current deck count is 5 containing
Adventurer Copper (null) (null) Copper 
Playing adventurer, return = 0...TEST SUCCESSFUL
Player 0 current deck count is 1 containing
Adventurer 
Current cards in player 0 hand 9
Adventurer Copper Copper Estate Adventurer Adventurer Copper Copper (null) 
Current treasure cards in player 0 hand 4
Should have +2 treasure cards
Had 4 treasure cards, found 6 ....TEST SUCCESSFUL
Had 9 handCount, now have 9 handCount, expect +2 (adventurer is not discarded in the code)
TEST FAILED
Player 0 current deck count is 1 containing
Adventurer 
Processing file 1 out of 1
File 'dominion.c'
Lines executed:31.88% of 574
Branches executed:25.30% of 419
Taken at least once:23.15% of 419
Calls executed:15.69% of 102
Creating 'dominion.c.gcov'

******************************************
******************************************
Unit test for the playVillage function
TEST SUCCESSFUL
Player 0 current cards in hand 5
Copper Copper Copper Copper Estate 
Player 0 current cards in deck 5
Estate Estate Copper Copper Copper 
First we'll give ourselves the Village card
Curse added
Player 0 current cards in hand 5
Copper Copper Copper Copper Estate 
Playing village, return = 0...TEST SUCCESSFUL
Should only be 1 card in playedCard pile 'village'
Played pile has 1...TEST SUCCESSFUL
Played pile contains: Copper 
Player 0 current cards in hand 6
Copper Copper Copper Copper Estate Copper 
Player 0, first 5 cards should still be the same? ...TEST SUCCESSFUL
Player 0 has 6 cards in hand and should have 5...TEST FAILED
Player 0 deck count should be 4, deck count now 3...TEST FAILED
Played count in current game should be 1, is 1...TEST SUCCESSFUL
Testing other players hands and handcounts.
Player 1 handCount was 0, now is 0...TEST SUCCESSFUL
Player 1 deckCount was 10, now is 10...TEST SUCCESSFUL
Validating hands cards are the same for player 1...TEST SUCCESSFUL
Validating deck cards are the same for player 1...TEST SUCCESSFUL
Player 1 discardCound was 0, now is 0...TEST SUCCESSFUL
Outposts is 0, was 0, mod:0... TEST SUCCESSFUL
Outpost Turn is 0 was 0, mod:0...TEST SUCCESSFUL
Turn is 0 was 0, mod:0..TEST SUCCESSFUL
Phase is 0 was 0, mod:0...TEST SUCCESSFUL
NumActions is 3 was 1, mod:2..TEST SUCCESSFUL
Coins is 4 was 4, mod:0...TEST SUCCESSFUL
Numbuys is 1 was 1, mod0...TEST SUCCESSFUL
Validating treasure map has not changed...TEST SUCCESSFUL
Validating embargo tokens has not changed...TEST SUCCESSFUL
******************************************
******************************************
Unit test for the playVillage function
TEST SUCCESSFUL
Player 0 current cards in hand 5
Copper Copper Copper Copper Estate 
Player 0 current cards in deck 5
Estate Estate Copper Copper Copper 
First we'll give ourselves the Village card
Curse added
Player 0 current cards in hand 5
Copper Copper Copper Copper Estate 
Playing village, return = 0...TEST SUCCESSFUL
Should only be 1 card in playedCard pile 'village'
Played pile has 1...TEST SUCCESSFUL
Played pile contains: Copper 
Player 0 current cards in hand 6
Copper Copper Copper Copper Estate Copper 
Player 0, first 5 cards should still be the same? ...TEST SUCCESSFUL
Player 0 has 6 cards in hand and should have 5...TEST FAILED
Player 0 deck count should be 4, deck count now 3...TEST FAILED
Played count in current game should be 1, is 1...TEST SUCCESSFUL
Testing other players hands and handcounts.
Player 1 handCount was 0, now is 0...TEST SUCCESSFUL
Player 1 deckCount was 10, now is 10...TEST SUCCESSFUL
Validating hands cards are the same for player 1...TEST SUCCESSFUL
Validating deck cards are the same for player 1...TEST SUCCESSFUL
Player 1 discardCound was 0, now is 0...TEST SUCCESSFUL
Player 2 handCount was 0, now is 0...TEST SUCCESSFUL
Player 2 deckCount was 10, now is 10...TEST SUCCESSFUL
Validating hands cards are the same for player 2...TEST SUCCESSFUL
Validating deck cards are the same for player 2...TEST SUCCESSFUL
Player 2 discardCound was 0, now is 0...TEST SUCCESSFUL
Outposts is 0, was 0, mod:0... TEST SUCCESSFUL
Outpost Turn is 0 was 0, mod:0...TEST SUCCESSFUL
Turn is 0 was 0, mod:0..TEST SUCCESSFUL
Phase is 0 was 0, mod:0...TEST SUCCESSFUL
NumActions is 3 was 1, mod:2..TEST SUCCESSFUL
Coins is 4 was 4, mod:0...TEST SUCCESSFUL
Numbuys is 1 was 1, mod0...TEST SUCCESSFUL
Validating treasure map has not changed...TEST SUCCESSFUL
Validating embargo tokens has not changed...TEST SUCCESSFUL
******************************************
******************************************
Unit test for the playVillage function
TEST SUCCESSFUL
Player 0 current cards in hand 5
Copper Copper Copper Copper Estate 
Player 0 current cards in deck 5
Estate Estate Copper Copper Copper 
First we'll give ourselves the Village card
Curse added
Player 0 current cards in hand 5
Copper Copper Copper Copper Estate 
Playing village, return = 0...TEST SUCCESSFUL
Should only be 1 card in playedCard pile 'village'
Played pile has 1...TEST SUCCESSFUL
Played pile contains: Copper 
Player 0 current cards in hand 6
Copper Copper Copper Copper Estate Copper 
Player 0, first 5 cards should still be the same? ...TEST SUCCESSFUL
Player 0 has 6 cards in hand and should have 5...TEST FAILED
Player 0 deck count should be 4, deck count now 3...TEST FAILED
Played count in current game should be 1, is 1...TEST SUCCESSFUL
Testing other players hands and handcounts.
Player 1 handCount was 0, now is 0...TEST SUCCESSFUL
Player 1 deckCount was 10, now is 10...TEST SUCCESSFUL
Validating hands cards are the same for player 1...TEST SUCCESSFUL
Validating deck cards are the same for player 1...TEST SUCCESSFUL
Player 1 discardCound was 0, now is 0...TEST SUCCESSFUL
Player 2 handCount was 0, now is 0...TEST SUCCESSFUL
Player 2 deckCount was 10, now is 10...TEST SUCCESSFUL
Validating hands cards are the same for player 2...TEST SUCCESSFUL
Validating deck cards are the same for player 2...TEST SUCCESSFUL
Player 2 discardCound was 0, now is 0...TEST SUCCESSFUL
Player 3 handCount was 0, now is 0...TEST SUCCESSFUL
Player 3 deckCount was 10, now is 10...TEST SUCCESSFUL
Validating hands cards are the same for player 3...TEST SUCCESSFUL
Validating deck cards are the same for player 3...TEST SUCCESSFUL
Player 3 discardCound was 0, now is 0...TEST SUCCESSFUL
Outposts is 0, was 0, mod:0... TEST SUCCESSFUL
Outpost Turn is 0 was 0, mod:0...TEST SUCCESSFUL
Turn is 0 was 0, mod:0..TEST SUCCESSFUL
Phase is 0 was 0, mod:0...TEST SUCCESSFUL
NumActions is 3 was 1, mod:2..TEST SUCCESSFUL
Coins is 4 was 4, mod:0...TEST SUCCESSFUL
Numbuys is 1 was 1, mod0...TEST SUCCESSFUL
Validating treasure map has not changed...TEST SUCCESSFUL
Validating embargo tokens has not changed...TEST SUCCESSFUL
Processing file 1 out of 1
File 'dominion.c'
Lines executed:32.93% of 574
Branches executed:25.30% of 419
Taken at least once:23.15% of 419
Calls executed:18.63% of 102
Creating 'dominion.c.gcov'

******************************************
******************************************
Unit test for the playMinion function
We have multiple ways to play Minion
Minion gives us 2 choices so we have 0,0;1,0;0,1;1,1
TEST SUCCESSFUL
TEST SUCCESSFUL
Player 0 current cards in hand 5
Copper Copper Copper Copper Estate 
First we'll give ourselves the Minion card
Minion added
Player 0 current cards in hand 6
Copper Copper Copper Copper Estate Minion 
We're also going to give the other players some cards
Player 1 current cards in hand 4
Silver Silver Silver Silver 
Player 2 current cards in hand 5
Gold Gold Gold Gold Gold 
Playing minion, choice1 = 0, choice2 = 0, return = 0...TEST SUCCESSFUL
Played count in current game should be 1, is 1...TEST SUCCESSFUL
Played pile contains: Minion 
Check that we received +1 action,
Check number of bonus coins received
Choice1 = 0 bonus coins = 0 expected = 0.
Outposts is 0, was 0, mod:0... TEST SUCCESSFUL
Outpost Turn is 0 was 0, mod:0...TEST SUCCESSFUL
Turn is 0 was 0, mod:0..TEST SUCCESSFUL
Phase is 0 was 0, mod:0...TEST SUCCESSFUL
NumActions is 2 was 1, mod:1..TEST SUCCESSFUL
Coins is 4 was 4, mod:0...TEST SUCCESSFUL
Numbuys is 1 was 1, mod0...TEST SUCCESSFUL
Player 0 had 5 cards, now has 5 cards, expect 5...TEST SUCCESSFUL
Check if hand is different than before, expect same hand...TEST SUCCESSFUL
Player 0 deck count should be 5, deck count now 5...TEST SUCCESSFUL
If we have bonus coins other players should not have new hands
Coin bonus 0 found, player 0 has new hand 0...TEST SUCCESSFUL
Player 1 had 4 cards, now has 4 cards, expect 4...TEST SUCCESSFUL
Check if hand is different than before, expect same hand...TEST SUCCESSFUL
Player 1 deck count should be 10, deck count now 10...TEST SUCCESSFUL
If we have bonus coins other players should not have new hands
Coin bonus 0 found, player 1 has new hand 0...TEST SUCCESSFUL
Player 2 had 5 cards, now has 5 cards, expect 5...TEST SUCCESSFUL
Check if hand is different than before, expect same hand...TEST SUCCESSFUL
Player 2 deck count should be 10, deck count now 10...TEST SUCCESSFUL
If we have bonus coins other players should not have new hands
Coin bonus 0 found, player 2 has new hand 0...TEST SUCCESSFUL
Validating treasure map has not changed...TEST SUCCESSFUL
Validating embargo tokens has not changed...TEST SUCCESSFUL
******************************************
******************************************
Unit test for the playMinion function
We have multiple ways to play Minion
Minion gives us 2 choices so we have 0,0;1,0;0,1;1,1
TEST SUCCESSFUL
TEST SUCCESSFUL
Player 0 current cards in hand 5
Copper Copper Copper Copper Estate 
First we'll give ourselves the Minion card
Minion added
Player 0 current cards in hand 6
Copper Copper Copper Copper Estate Minion 
We're also going to give the other players some cards
Player 1 current cards in hand 4
Silver Silver Silver Silver 
Player 2 current cards in hand 5
Gold Gold Gold Gold Gold 
Playing minion, choice1 = 1, choice2 = 0, return = 0...TEST SUCCESSFUL
Played count in current game should be 1, is 1...TEST SUCCESSFUL
Played pile contains: Minion 
Check that we received +1 action,
Check number of bonus coins received
Choice1 = 1 bonus coins = 2 expected = 2.
Outposts is 0, was 0, mod:0... TEST SUCCESSFUL
Outpost Turn is 0 was 0, mod:0...TEST SUCCESSFUL
Turn is 0 was 0, mod:0..TEST SUCCESSFUL
Phase is 0 was 0, mod:0...TEST SUCCESSFUL
NumActions is 2 was 1, mod:1..TEST SUCCESSFUL
Coins is 6 was 4, mod:2...TEST SUCCESSFUL
Numbuys is 1 was 1, mod0...TEST SUCCESSFUL
Player 0 had 5 cards, now has 5 cards, expect 5...TEST SUCCESSFUL
Check if hand is different than before, expect same hand...TEST SUCCESSFUL
Player 0 deck count should be 5, deck count now 5...TEST SUCCESSFUL
If we have bonus coins other players should not have new hands
Coin bonus 2 found, player 0 has new hand 0...TEST SUCCESSFUL
Player 1 had 4 cards, now has 4 cards, expect 4...TEST SUCCESSFUL
Check if hand is different than before, expect same hand...TEST SUCCESSFUL
Player 1 deck count should be 10, deck count now 10...TEST SUCCESSFUL
If we have bonus coins other players should not have new hands
Coin bonus 2 found, player 1 has new hand 0...TEST SUCCESSFUL
Player 2 had 5 cards, now has 5 cards, expect 5...TEST SUCCESSFUL
Check if hand is different than before, expect same hand...TEST SUCCESSFUL
Player 2 deck count should be 10, deck count now 10...TEST SUCCESSFUL
If we have bonus coins other players should not have new hands
Coin bonus 2 found, player 2 has new hand 0...TEST SUCCESSFUL
Validating treasure map has not changed...TEST SUCCESSFUL
Validating embargo tokens has not changed...TEST SUCCESSFUL
******************************************
******************************************
Unit test for the playMinion function
We have multiple ways to play Minion
Minion gives us 2 choices so we have 0,0;1,0;0,1;1,1
TEST SUCCESSFUL
TEST SUCCESSFUL
Player 0 current cards in hand 5
Copper Copper Copper Copper Estate 
First we'll give ourselves the Minion card
Minion added
Player 0 current cards in hand 6
Copper Copper Copper Copper Estate Minion 
We're also going to give the other players some cards
Player 1 current cards in hand 4
Silver Silver Silver Silver 
Player 2 current cards in hand 5
Gold Gold Gold Gold Gold 
Playing minion, choice1 = 0, choice2 = 1, return = 0...TEST SUCCESSFUL
Played count in current game should be 1, is 11...TEST FAILED
Played pile contains: Minion (null) Estate Copper Copper Copper Curse Gold Gold Gold Gold 
Check that we received +1 action,
Check number of bonus coins received
Choice1 = 0 bonus coins = 0 expected = 0.
Outposts is 0, was 0, mod:0... TEST SUCCESSFUL
Outpost Turn is 0 was 0, mod:0...TEST SUCCESSFUL
Turn is 0 was 0, mod:0..TEST SUCCESSFUL
Phase is 0 was 0, mod:0...TEST SUCCESSFUL
NumActions is 2 was 1, mod:1..TEST SUCCESSFUL
Coins is 4 was 4, mod:0...TEST SUCCESSFUL
Numbuys is 1 was 1, mod0...TEST SUCCESSFUL
Player 0 had 5 cards, now has 4 cards, expect 4...TEST SUCCESSFUL
Check if hand is different than before, expect different hand...TEST SUCCESSFUL
Player 0 deck count should be 1, deck count now 1...TEST SUCCESSFUL
If we have bonus coins other players should not have new hands
Coin bonus 0 found, player 0 has new hand 1...TEST SUCCESSFUL
Player 1 had 4 cards, now has 4 cards, expect 4...TEST SUCCESSFUL
Check if hand is different than before, expect same hand...TEST SUCCESSFUL
Player 1 deck count should be 10, deck count now 10...TEST SUCCESSFUL
If we have bonus coins other players should not have new hands
Coin bonus 0 found, player 1 has new hand 0...TEST SUCCESSFUL
Player 2 had 5 cards, now has 4 cards, expect 4...TEST SUCCESSFUL
Check if hand is different than before, expect different hand...TEST SUCCESSFUL
Player 2 deck count should be 6, deck count now 6...TEST SUCCESSFUL
If we have bonus coins other players should not have new hands
Coin bonus 0 found, player 2 has new hand 1...TEST SUCCESSFUL
Validating treasure map has not changed...TEST SUCCESSFUL
Validating embargo tokens has not changed...TEST SUCCESSFUL
******************************************
******************************************
Unit test for the playMinion function
We have multiple ways to play Minion
Minion gives us 2 choices so we have 0,0;1,0;0,1;1,1
TEST SUCCESSFUL
TEST SUCCESSFUL
Player 0 current cards in hand 5
Copper Copper Copper Copper Estate 
First we'll give ourselves the Minion card
Minion added
Player 0 current cards in hand 6
Copper Copper Copper Copper Estate Minion 
We're also going to give the other players some cards
Player 1 current cards in hand 4
Silver Silver Silver Silver 
Player 2 current cards in hand 5
Gold Gold Gold Gold Gold 
Playing minion, choice1 = 1, choice2 = 1, return = 0...TEST SUCCESSFUL
Played count in current game should be 1, is 11...TEST FAILED
Played pile contains: Minion (null) Estate Copper Copper Copper (null) Gold Gold Gold Gold 
Check that we received +1 action,
Check number of bonus coins received
Choice1 = 1 bonus coins = 2 expected = 2.
Outposts is 0, was 0, mod:0... TEST SUCCESSFUL
Outpost Turn is 0 was 0, mod:0...TEST SUCCESSFUL
Turn is 0 was 0, mod:0..TEST SUCCESSFUL
Phase is 0 was 0, mod:0...TEST SUCCESSFUL
NumActions is 2 was 1, mod:1..TEST SUCCESSFUL
Coins is 6 was 4, mod:2...TEST SUCCESSFUL
Numbuys is 1 was 1, mod0...TEST SUCCESSFUL
Player 0 had 5 cards, now has 4 cards, expect 4...TEST SUCCESSFUL
Check if hand is different than before, expect different hand...TEST SUCCESSFUL
Player 0 deck count should be 1, deck count now 1...TEST SUCCESSFUL
If we have bonus coins other players should not have new hands
Coin bonus 2 found, player 0 has new hand 1...TEST FAILED
Player 1 had 4 cards, now has 4 cards, expect 4...TEST SUCCESSFUL
Check if hand is different than before, expect same hand...TEST SUCCESSFUL
Player 1 deck count should be 10, deck count now 10...TEST SUCCESSFUL
If we have bonus coins other players should not have new hands
Coin bonus 2 found, player 1 has new hand 0...TEST SUCCESSFUL
Player 2 had 5 cards, now has 4 cards, expect 4...TEST SUCCESSFUL
Check if hand is different than before, expect different hand...TEST SUCCESSFUL
Player 2 deck count should be 6, deck count now 6...TEST SUCCESSFUL
If we have bonus coins other players should not have new hands
Coin bonus 2 found, player 2 has new hand 1...TEST FAILED
Validating treasure map has not changed...TEST SUCCESSFUL
Validating embargo tokens has not changed...TEST SUCCESSFUL
Processing file 1 out of 1
File 'dominion.c'
Lines executed:36.76% of 574
Branches executed:29.59% of 419
Taken at least once:27.92% of 419
Calls executed:25.49% of 102
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:/****************************************
        -:    2: * Filename: dominion.c
        -:    3: * Student: Johannes Pikel
        -:    4: * ONID: pikelj
        -:    5: * Class: CS362-400
        -:    6: * Date: 2017.07.05
        -:    7: * Cite: Original Source from various sources
        -:    8: * *************************************/
        -:    9:
        -:   10:#include "dominion.h"
        -:   11:#include "dominion_helpers.h"
        -:   12:#include "rngs.h"
        -:   13:#include <stdio.h>
        -:   14:#include <math.h>
        -:   15:#include <stdlib.h>
        -:   16:
function compare called 2008 returned 100% blocks executed 100%
     2008:   17:int compare(const void* a, const void* b) {
     2008:   18:    if (*(int*)a > *(int*)b)
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
      195:   19:        return 1;
     1813:   20:    if (*(int*)a < *(int*)b)
branch  0 taken 26% (fallthrough)
branch  1 taken 74%
      467:   21:        return -1;
     1346:   22:    return 0;
        -:   23:}
        -:   24:
function newGame called 35 returned 100% blocks executed 100%
       35:   25:struct gameState* newGame() {
       35:   26:    struct gameState* g = malloc(sizeof(struct gameState));
       35:   27:    return g;
        -:   28:}
        -:   29:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   30:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   31:        int k8, int k9, int k10) {
    #####:   32:    int* k = malloc(10 * sizeof(int));
    #####:   33:    k[0] = k1;
    #####:   34:    k[1] = k2;
    #####:   35:    k[2] = k3;
    #####:   36:    k[3] = k4;
    #####:   37:    k[4] = k5;
    #####:   38:    k[5] = k6;
    #####:   39:    k[6] = k7;
    #####:   40:    k[7] = k8;
    #####:   41:    k[8] = k9;
    #####:   42:    k[9] = k10;
    #####:   43:    return k;
        -:   44:}
        -:   45:
function initializeGame called 48 returned 100% blocks executed 98%
       48:   46:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   47:        struct gameState *state) {
        -:   48:
        -:   49:    int i;
        -:   50:    int j;
        -:   51:    int it;			
        -:   52:    //set up random number generator
       48:   53:    SelectStream(1);
call    0 returned 100%
       48:   54:    PutSeed((long)randomSeed);
call    0 returned 100%
        -:   55:
        -:   56:    //check number of players
       48:   57:    if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
branch  2 taken 7% (fallthrough)
branch  3 taken 93%
        -:   58:    {
        5:   59:        return -1;
        -:   60:    }
        -:   61:
        -:   62:    //set number of players
       43:   63:    state->numPlayers = numPlayers;
        -:   64:
        -:   65:    //check selected kingdom cards are different
      419:   66:    for (i = 0; i < 10; i++)
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
        -:   67:    {
     4190:   68:        for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   69:        {
     3814:   70:            if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        -:   71:            {
        9:   72:                return -1;
        -:   73:            }
        -:   74:        }
        -:   75:    }
        -:   76:
        -:   77:
        -:   78:    //initialize supply
        -:   79:    ///////////////////////////////
        -:   80:
        -:   81:    //set number of Curse cards
       34:   82:    if (numPlayers == 2)
branch  0 taken 29% (fallthrough)
branch  1 taken 71%
        -:   83:    {
       10:   84:        state->supplyCount[curse] = 10;
        -:   85:    }
       24:   86:    else if (numPlayers == 3)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -:   87:    {
       16:   88:        state->supplyCount[curse] = 20;
        -:   89:    }
        -:   90:    else
        -:   91:    {
        8:   92:        state->supplyCount[curse] = 30;
        -:   93:    }
        -:   94:
        -:   95:    //set number of Victory cards
       34:   96:    if (numPlayers == 2)
branch  0 taken 29% (fallthrough)
branch  1 taken 71%
        -:   97:    {
       10:   98:        state->supplyCount[estate] = 8;
       10:   99:        state->supplyCount[duchy] = 8;
       10:  100:        state->supplyCount[province] = 8;
        -:  101:    }
        -:  102:    else
        -:  103:    {
       24:  104:        state->supplyCount[estate] = 12;
       24:  105:        state->supplyCount[duchy] = 12;
       24:  106:        state->supplyCount[province] = 12;
        -:  107:    }
        -:  108:
        -:  109:    //set number of Treasure cards
       34:  110:    state->supplyCount[copper] = 60 - (7 * numPlayers);
       34:  111:    state->supplyCount[silver] = 40;
       34:  112:    state->supplyCount[gold] = 30;
        -:  113:
        -:  114:    //set number of Kingdom cards
      714:  115:    for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  116:    {
     5610:  117:        for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  118:        {
     5270:  119:            if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  120:            {
        -:  121:                //check if card is a 'Victory' Kingdom card
      340:  122:                if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
        -:  123:                {
       94:  124:                    if (numPlayers == 2){ 
branch  0 taken 32% (fallthrough)
branch  1 taken 68%
       15:  125:                        state->supplyCount[i] = 8; 
        -:  126:                    }
       32:  127:                    else{ state->supplyCount[i] = 12; }
        -:  128:                }
        -:  129:                else
        -:  130:                {
      293:  131:                    state->supplyCount[i] = 10;
        -:  132:                }
      340:  133:                break;
        -:  134:            }
        -:  135:            else    //card is not in the set choosen for the game
        -:  136:            {
     4930:  137:                state->supplyCount[i] = -1;
        -:  138:            }
        -:  139:        }
        -:  140:
        -:  141:    }
        -:  142:
        -:  143:    ////////////////////////
        -:  144:    //supply intilization complete
        -:  145:
        -:  146:    //set player decks
      134:  147:    for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  148:    {
      100:  149:        state->deckCount[i] = 0;
      400:  150:        for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  151:        {
      300:  152:            state->deck[i][j] = estate;
      300:  153:            state->deckCount[i]++;
        -:  154:        }
      800:  155:        for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  156:        {
      700:  157:            state->deck[i][j] = copper;
      700:  158:            state->deckCount[i]++;		
        -:  159:        }
        -:  160:    }
        -:  161:
        -:  162:    //shuffle player decks
      134:  163:    for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  164:    {
      100:  165:        if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  166:        {
    #####:  167:            return -1;
        -:  168:        }
        -:  169:    }
        -:  170:
        -:  171:    //draw player hands
      134:  172:    for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  173:    {  
        -:  174:        //initialize hand size to zero
      100:  175:        state->handCount[i] = 0;
      100:  176:        state->discardCount[i] = 0;
        -:  177:        //draw 5 cards
        -:  178:        // for (j = 0; j < 5; j++)
        -:  179:        //	{
        -:  180:        //	  drawCard(i, state);
        -:  181:        //	}
        -:  182:    }
        -:  183:
        -:  184:    //set embargo tokens to 0 for all supply piles
      952:  185:    for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  186:    {
      918:  187:        state->embargoTokens[i] = 0;
        -:  188:    }
        -:  189:
        -:  190:    //initialize first player's turn
       34:  191:    state->outpostPlayed = 0;
       34:  192:    state->phase = 0;
       34:  193:    state->numActions = 1;
       34:  194:    state->numBuys = 1;
       34:  195:    state->playedCardCount = 0;
       34:  196:    state->whoseTurn = 0;
       34:  197:    state->handCount[state->whoseTurn] = 0;
        -:  198:    //int it; move to top
        -:  199:
        -:  200:    //Moved draw cards to here, only drawing at the start of a turn
      204:  201:    for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      170:  202:        drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  203:    }
        -:  204:
       34:  205:    updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  206:
       34:  207:    return 0;
        -:  208:}
        -:  209:
function shuffle called 132 returned 100% blocks executed 100%
      132:  210:int shuffle(int player, struct gameState *state) {
        -:  211:
        -:  212:
        -:  213:    int newDeck[MAX_DECK];
      132:  214:    int newDeckPos = 0;
        -:  215:    int card;
        -:  216:    int i;
        -:  217:
      132:  218:    if (state->deckCount[player] < 1)
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
       12:  219:        return -1;
      120:  220:    qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  221:    /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  222:
     1460:  223:    while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     1220:  224:        card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
     1220:  225:        newDeck[newDeckPos] = state->deck[player][card];
     1220:  226:        newDeckPos++;
     4064:  227:        for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
     2844:  228:            state->deck[player][i] = state->deck[player][i+1];
        -:  229:        }
     1220:  230:        state->deckCount[player]--;
        -:  231:    }
     1340:  232:    for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     1220:  233:        state->deck[player][i] = newDeck[i];
     1220:  234:        state->deckCount[player]++;
        -:  235:    }
        -:  236:
      120:  237:    return 0;
        -:  238:}
        -:  239:
function playCard called 0 returned 0% blocks executed 0%
    #####:  240:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  241:{	
        -:  242:    int card;
    #####:  243:    int coin_bonus = 0; 		//tracks coins gain from actions
        -:  244:
        -:  245:    //check if it is the right phase
    #####:  246:    if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  247:    {
    #####:  248:        return -1;
        -:  249:    }
        -:  250:
        -:  251:    //check if player has enough actions
    #####:  252:    if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  253:    {
    #####:  254:        return -1;
        -:  255:    }
        -:  256:
        -:  257:    //get card played
    #####:  258:    card = handCard(handPos, state);
call    0 never executed
        -:  259:
        -:  260:    //check if selected card is an action
    #####:  261:    if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  262:    {
    #####:  263:        return -1;
        -:  264:    }
        -:  265:
        -:  266:    //play card
    #####:  267:    if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  268:    {
    #####:  269:        return -1;
        -:  270:    }
        -:  271:
        -:  272:    //reduce number of actions
    #####:  273:    state->numActions--;
        -:  274:
        -:  275:    //update coins (Treasure cards may be added with card draws)
    #####:  276:    updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  277:
    #####:  278:    return 0;
        -:  279:}
        -:  280:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  281:int buyCard(int supplyPos, struct gameState *state) {
        -:  282:    int who;
        -:  283:    if (DEBUG){
        -:  284:        printf("Entering buyCard...\n");
        -:  285:    }
        -:  286:
        -:  287:    // I don't know what to do about the phase thing.
        -:  288:
    #####:  289:    who = state->whoseTurn;
        -:  290:
    #####:  291:    if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  292:        if (DEBUG)
        -:  293:            printf("You do not have any buys left\n");
    #####:  294:        return -1;
    #####:  295:    } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  296:        if (DEBUG)
        -:  297:            printf("There are not any of that type of card left\n");
    #####:  298:        return -1;
    #####:  299:    } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  300:        if (DEBUG) 
        -:  301:            printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  302:        return -1;
        -:  303:    } else {
    #####:  304:        state->phase=1;
        -:  305:        //state->supplyCount[supplyPos]--;
    #####:  306:        gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  307:
    #####:  308:        state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  309:        state->numBuys--;
        -:  310:        if (DEBUG)
        -:  311:            printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  312:    }
        -:  313:
        -:  314:    //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  315:    //state->discardCount[who]++;
        -:  316:
    #####:  317:    return 0;
        -:  318:}
        -:  319:
function numHandCards called 12 returned 100% blocks executed 100%
       12:  320:int numHandCards(struct gameState *state) {
       12:  321:    return state->handCount[ whoseTurn(state) ];
call    0 returned 100%
        -:  322:}
        -:  323:
function handCard called 0 returned 0% blocks executed 0%
    #####:  324:int handCard(int handPos, struct gameState *state) {
    #####:  325:    int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  326:    return state->hand[currentPlayer][handPos];
        -:  327:}
        -:  328:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  329:int supplyCount(int card, struct gameState *state) {
    #####:  330:    return state->supplyCount[card];
        -:  331:}
        -:  332:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  333:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  334:    int i;
    #####:  335:    int count = 0;
        -:  336:
    #####:  337:    for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  338:    {
    #####:  339:        if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  340:    }
        -:  341:
    #####:  342:    for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  343:    {
    #####:  344:        if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  345:    }
        -:  346:
    #####:  347:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  348:    {
    #####:  349:        if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  350:    }
        -:  351:
    #####:  352:    return count;
        -:  353:}
        -:  354:
function whoseTurn called 45 returned 100% blocks executed 100%
       45:  355:int whoseTurn(struct gameState *state) {
       45:  356:    return state->whoseTurn;
        -:  357:}
        -:  358:
function endTurn called 33 returned 100% blocks executed 100%
       33:  359:int endTurn(struct gameState *state) {
        -:  360:    int k;
        -:  361:    int i;
       33:  362:    int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  363:
        -:  364:    //Discard hand
      238:  365:    for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 taken 86%
branch  1 taken 14% (fallthrough)
      205:  366:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
      205:  367:        state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  368:    }
       33:  369:    state->handCount[currentPlayer] = 0;//Reset hand count
        -:  370:
        -:  371:    //Code for determining the player
       33:  372:    if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 taken 61% (fallthrough)
branch  1 taken 39%
       20:  373:        state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  374:    }
        -:  375:    else{
       13:  376:        state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  377:    }
        -:  378:
       33:  379:    state->outpostPlayed = 0;
       33:  380:    state->phase = 0;
       33:  381:    state->numActions = 1;
       33:  382:    state->coins = 0;
       33:  383:    state->numBuys = 1;
       33:  384:    state->playedCardCount = 0;
       33:  385:    state->handCount[state->whoseTurn] = 0;
        -:  386:
        -:  387:    //int k; move to top
        -:  388:    //Next player draws hand
      198:  389:    for (k = 0; k < 5; k++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      165:  390:        drawCard(state->whoseTurn, state);//Draw a card
call    0 returned 100%
        -:  391:    }
        -:  392:
        -:  393:    //Update money
       33:  394:    updateCoins(state->whoseTurn, state , 0);
call    0 returned 100%
        -:  395:
       33:  396:    return 0;
        -:  397:}
        -:  398:
function isGameOver called 113 returned 100% blocks executed 100%
      113:  399:int isGameOver(struct gameState *state) {
        -:  400:    int i;
        -:  401:    int j;
        -:  402:
        -:  403:    //if stack of Province cards is empty, the game ends
      113:  404:    if (state->supplyCount[province] == 0)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  405:    {
        7:  406:        return 1;
        -:  407:    }
        -:  408:
        -:  409:    //if three supply pile are at 0, the game ends
      106:  410:    j = 0;
     2756:  411:    for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  412:    {
     2650:  413:        if (state->supplyCount[i] == 0)
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
        -:  414:        {
      173:  415:            j++;
        -:  416:        }
        -:  417:    }
      106:  418:    if ( j >= 3)
branch  0 taken 35% (fallthrough)
branch  1 taken 65%
        -:  419:    {
       37:  420:        return 1;
        -:  421:    }
        -:  422:
       69:  423:    return 0;
        -:  424:}
        -:  425:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  426:int scoreFor (int player, struct gameState *state) {
        -:  427:
        -:  428:    int i;
    #####:  429:    int score = 0;
        -:  430:    //score from hand
    #####:  431:    for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  432:    {
    #####:  433:        if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  434:        if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  435:        if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  436:        if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  437:        if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  438:        if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  439:    }
        -:  440:
        -:  441:    //score from discard
    #####:  442:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  443:    {
    #####:  444:        if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  445:        if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  446:        if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  447:        if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  448:        if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  449:        if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  450:    }
        -:  451:
        -:  452:    //score from deck
    #####:  453:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  454:    {
    #####:  455:        if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  456:        if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  457:        if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  458:        if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  459:        if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  460:        if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  461:    }
        -:  462:
    #####:  463:    return score;
        -:  464:}
        -:  465:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  466:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  467:    int i;	
        -:  468:    int j;
        -:  469:    int highScore;
        -:  470:    int currentPlayer;
        -:  471:
        -:  472:    //get score for each player
    #####:  473:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  474:    {
        -:  475:        //set unused player scores to -9999
    #####:  476:        if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  477:        {
    #####:  478:            players[i] = -9999;
        -:  479:        }
        -:  480:        else
        -:  481:        {
    #####:  482:            players[i] = scoreFor (i, state);
call    0 never executed
        -:  483:        }
        -:  484:    }
        -:  485:
        -:  486:    //find highest score
    #####:  487:    j = 0;
    #####:  488:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  489:    {
    #####:  490:        if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  491:        {
    #####:  492:            j = i;
        -:  493:        }
        -:  494:    }
    #####:  495:    highScore = players[j];
        -:  496:
        -:  497:    //add 1 to players who had less turns
    #####:  498:    currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  499:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  500:    {
    #####:  501:        if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  502:        {
    #####:  503:            players[i]++;
        -:  504:        }
        -:  505:    }
        -:  506:
        -:  507:    //find new highest score
    #####:  508:    j = 0;
    #####:  509:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  510:    {
    #####:  511:        if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  512:        {
    #####:  513:            j = i;
        -:  514:        }
        -:  515:    }
    #####:  516:    highScore = players[j];
        -:  517:
        -:  518:    //set winners in array to 1 and rest to 0
    #####:  519:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  520:    {
    #####:  521:        if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  522:        {
    #####:  523:            players[i] = 1;
        -:  524:        }
        -:  525:        else
        -:  526:        {
    #####:  527:            players[i] = 0;
        -:  528:        }
        -:  529:    }
        -:  530:
    #####:  531:    return 0;
        -:  532:}
        -:  533:
function drawCard called 428 returned 100% blocks executed 92%
      428:  534:int drawCard(int player, struct gameState *state)
        -:  535:{	int count;
        -:  536:    int deckCounter;
      428:  537:    if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
        -:  538:
        -:  539:        //Step 1 Shuffle the discard pile back into a deck
        -:  540:        int i;
        -:  541:        //Move discard to deck
      156:  542:        for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 93%
branch  1 taken 7% (fallthrough)
      145:  543:            state->deck[player][i] = state->discard[player][i];
      145:  544:            state->discard[player][i] = -1;
        -:  545:        }
        -:  546:
       11:  547:        state->deckCount[player] = state->discardCount[player];
       11:  548:        state->discardCount[player] = 0;//Reset discard
        -:  549:
        -:  550:        //Shufffle the deck
       11:  551:        shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  552:
        -:  553:        if (DEBUG){//Debug statements
        -:  554:            printf("Deck count now: %d\n", state->deckCount[player]);
        -:  555:        }
        -:  556:
       11:  557:        state->discardCount[player] = 0;
        -:  558:
        -:  559:        //Step 2 Draw Card
       11:  560:        count = state->handCount[player];//Get current player's hand count
        -:  561:
        -:  562:        if (DEBUG){//Debug statements
        -:  563:            printf("Current hand count: %d\n", count);
        -:  564:        }
        -:  565:
       11:  566:        deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  567:
       11:  568:        if (deckCounter == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  569:            return -1;
        -:  570:
       11:  571:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       11:  572:        state->deckCount[player]--;
       11:  573:        state->handCount[player]++;//Increment hand count
        -:  574:    }
        -:  575:
        -:  576:    else{
      417:  577:        int count = state->handCount[player];//Get current hand count for player
        -:  578:        int deckCounter;
        -:  579:        if (DEBUG){//Debug statements
        -:  580:            printf("Current hand count: %d\n", count);
        -:  581:        }
        -:  582:
      417:  583:        deckCounter = state->deckCount[player];//Create holder for the deck count
      417:  584:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      417:  585:        state->deckCount[player]--;
      417:  586:        state->handCount[player]++;//Increment hand count
        -:  587:    }
        -:  588:
      428:  589:    return 0;
        -:  590:}
        -:  591:
function getCost called 0 returned 0% blocks executed 0%
    #####:  592:int getCost(int cardNumber)
        -:  593:{
    #####:  594:    switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  595:    {
        -:  596:        case curse:
    #####:  597:            return 0;
        -:  598:        case estate:
    #####:  599:            return 2;
        -:  600:        case duchy:
    #####:  601:            return 5;
        -:  602:        case province:
    #####:  603:            return 8;
        -:  604:        case copper:
    #####:  605:            return 0;
        -:  606:        case silver:
    #####:  607:            return 3;
        -:  608:        case gold:
    #####:  609:            return 6;
        -:  610:        case adventurer:
    #####:  611:            return 6;
        -:  612:        case council_room:
    #####:  613:            return 5;
        -:  614:        case feast:
    #####:  615:            return 4;
        -:  616:        case gardens:
    #####:  617:            return 4;
        -:  618:        case mine:
    #####:  619:            return 5;
        -:  620:        case remodel:
    #####:  621:            return 4;
        -:  622:        case smithy:
    #####:  623:            return 4;
        -:  624:        case village:
    #####:  625:            return 3;
        -:  626:        case baron:
    #####:  627:            return 4;
        -:  628:        case great_hall:
    #####:  629:            return 3;
        -:  630:        case minion:
    #####:  631:            return 5;
        -:  632:        case steward:
    #####:  633:            return 3;
        -:  634:        case tribute:
    #####:  635:            return 5;
        -:  636:        case ambassador:
    #####:  637:            return 3;
        -:  638:        case cutpurse:
    #####:  639:            return 4;
        -:  640:        case embargo: 
    #####:  641:            return 2;
        -:  642:        case outpost:
    #####:  643:            return 5;
        -:  644:        case salvager:
    #####:  645:            return 4;
        -:  646:        case sea_hag:
    #####:  647:            return 4;
        -:  648:        case treasure_map:
    #####:  649:            return 4;
        -:  650:    }
        -:  651:
    #####:  652:    return -1;
        -:  653:}
        -:  654:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  655:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  656:{
        -:  657:    int i;
        -:  658:    int j;
        -:  659:    int k;
        -:  660:    int index;
    #####:  661:    int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  662:    int nextPlayer = currentPlayer + 1;
        -:  663:
    #####:  664:    int tributeRevealedCards[2] = {-1, -1};
    #####:  665:    if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  666:        nextPlayer = 0;
        -:  667:    }
        -:  668:
        -:  669:
        -:  670:    //uses switch to select card and perform actions
    #####:  671:    switch( card ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  672:    {
        -:  673:        /* each of the card effect functions returns 0 on success or -1 on failure*/
        -:  674:        case adventurer:
    #####:  675:            return (playAdventurer(currentPlayer, state, handPos));
call    0 never executed
        -:  676:        case smithy:
    #####:  677:            return (playSmithy(currentPlayer, state, handPos));
call    0 never executed
        -:  678:        case village:
    #####:  679:            return (playVillage(currentPlayer, state, handPos));
call    0 never executed
        -:  680:        case sea_hag:
    #####:  681:            return (playSeaHag(currentPlayer, state));
call    0 never executed
        -:  682:        case minion:
    #####:  683:            return (playMinion(currentPlayer, state, handPos, choice1, choice2, bonus));
call    0 never executed
        -:  684:        case council_room:
    #####:  685:            return (playCouncilRoom(currentPlayer, state, handPos));
call    0 never executed
        -:  686:        case feast:
    #####:  687:            return (playFeast(currentPlayer, state, choice1));
call    0 never executed
        -:  688:        case gardens:
    #####:  689:            return (playGardens());
call    0 never executed
        -:  690:        case embargo: 
    #####:  691:            return (playEmbargo(currentPlayer, state, handPos, choice1, bonus));
call    0 never executed
        -:  692:        case mine:
    #####:  693:            j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  694:
    #####:  695:            if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  696:            {
    #####:  697:                return -1;
        -:  698:            }
        -:  699:
    #####:  700:            if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  701:            {
    #####:  702:                return -1;
        -:  703:            }
        -:  704:
    #####:  705:            if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  706:            {
    #####:  707:                return -1;
        -:  708:            }
        -:  709:
    #####:  710:            gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  711:
        -:  712:            //discard card from hand
    #####:  713:            discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  714:
        -:  715:            //discard trashed card
    #####:  716:            for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  717:            {
    #####:  718:                if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  719:                {
    #####:  720:                    discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  721:                    break;
        -:  722:                }
        -:  723:            }
        -:  724:
    #####:  725:            return 0;
        -:  726:
        -:  727:        case remodel:
    #####:  728:            j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  729:
    #####:  730:            if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  731:            {
    #####:  732:                return -1;
        -:  733:            }
        -:  734:
    #####:  735:            gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  736:
        -:  737:            //discard card from hand
    #####:  738:            discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  739:
        -:  740:            //discard trashed card
    #####:  741:            for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  742:            {
    #####:  743:                if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  744:                {
    #####:  745:                    discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  746:                    break;
        -:  747:                }
        -:  748:            }
        -:  749:
        -:  750:
    #####:  751:            return 0;
        -:  752:
        -:  753:
        -:  754:
        -:  755:        case baron:
    #####:  756:            state->numBuys++;//Increase buys by 1!
    #####:  757:            if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  758:                int p = 0;//Iterator for hand!
    #####:  759:                int card_not_discarded = 1;//Flag for discard set!
    #####:  760:                while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  761:                    if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  762:                        state->coins += 4;//Add 4 coins to the amount of coins
    #####:  763:                        state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  764:                        state->discardCount[currentPlayer]++;
    #####:  765:                        for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  766:                            state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  767:                        }
    #####:  768:                        state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  769:                        state->handCount[currentPlayer]--;
    #####:  770:                        card_not_discarded = 0;//Exit the loop
        -:  771:                    }
    #####:  772:                    else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  773:                        if(DEBUG) {
        -:  774:                            printf("No estate cards in your hand, invalid choice\n");
        -:  775:                            printf("Must gain an estate if there are any\n");
        -:  776:                        }
    #####:  777:                        if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  778:                            gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  779:                            state->supplyCount[estate]--;//Decrement estates
    #####:  780:                            if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  781:                                isGameOver(state);
call    0 never executed
        -:  782:                            }
        -:  783:                        }
    #####:  784:                        card_not_discarded = 0;//Exit the loop
        -:  785:                    }
        -:  786:
        -:  787:                    else{
    #####:  788:                        p++;//Next card
        -:  789:                    }
        -:  790:                }
        -:  791:            }
        -:  792:
        -:  793:            else{
    #####:  794:                if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  795:                    gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  796:                    state->supplyCount[estate]--;//Decrement Estates
    #####:  797:                    if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  798:                        isGameOver(state);
call    0 never executed
        -:  799:                    }
        -:  800:                }
        -:  801:            }
        -:  802:
        -:  803:
    #####:  804:            return 0;
        -:  805:
        -:  806:        case great_hall:
        -:  807:            //+1 Card
    #####:  808:            drawCard(currentPlayer, state);
call    0 never executed
        -:  809:
        -:  810:            //+1 Actions
    #####:  811:            state->numActions++;
        -:  812:
        -:  813:            //discard card from hand
    #####:  814:            discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  815:            return 0;
        -:  816:
        -:  817:        case steward:
    #####:  818:            if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  819:            {
        -:  820:                //+2 cards
    #####:  821:                drawCard(currentPlayer, state);
call    0 never executed
    #####:  822:                drawCard(currentPlayer, state);
call    0 never executed
        -:  823:            }
    #####:  824:            else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  825:            {
        -:  826:                //+2 coins
    #####:  827:                state->coins = state->coins + 2;
        -:  828:            }
        -:  829:            else
        -:  830:            {
        -:  831:                //trash 2 cards in hand
    #####:  832:                discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  833:                discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  834:            }
        -:  835:
        -:  836:            //discard card from hand
    #####:  837:            discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  838:            return 0;
        -:  839:
        -:  840:        case tribute:
    #####:  841:            if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  842:                if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  843:                    tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  844:                    state->deckCount[nextPlayer]--;
        -:  845:                }
    #####:  846:                else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  847:                    tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  848:                    state->discardCount[nextPlayer]--;
        -:  849:                }
        -:  850:                else{
        -:  851:                    //No Card to Reveal
        -:  852:                    if (DEBUG){
        -:  853:                        printf("No cards to reveal\n");
        -:  854:                    }
        -:  855:                }
        -:  856:            }
        -:  857:
        -:  858:            else{
    #####:  859:                if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  860:                    for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  861:                        state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  862:                        state->deckCount[nextPlayer]++;
    #####:  863:                        state->discard[nextPlayer][i] = -1;
    #####:  864:                        state->discardCount[nextPlayer]--;
        -:  865:                    }
        -:  866:
    #####:  867:                    shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  868:                } 
    #####:  869:                tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  870:                state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  871:                state->deckCount[nextPlayer]--;
    #####:  872:                tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  873:                state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  874:                state->deckCount[nextPlayer]--;
        -:  875:            }    
        -:  876:
    #####:  877:            if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  878:                state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  879:                state->playedCardCount++;
    #####:  880:                tributeRevealedCards[1] = -1;
        -:  881:            }
        -:  882:
    #####:  883:            for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  884:                if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  885:                    state->coins += 2;
        -:  886:                }
        -:  887:
    #####:  888:                else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  889:                    drawCard(currentPlayer, state);
call    0 never executed
    #####:  890:                    drawCard(currentPlayer, state);
call    0 never executed
        -:  891:                }
        -:  892:                else{//Action Card
    #####:  893:                    state->numActions = state->numActions + 2;
        -:  894:                }
        -:  895:            }
        -:  896:
    #####:  897:            return 0;
        -:  898:
        -:  899:        case ambassador:
    #####:  900:            j = 0;		//used to check if player has enough cards to discard
        -:  901:
    #####:  902:            if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  903:            {
    #####:  904:                return -1;				
        -:  905:            }
        -:  906:
    #####:  907:            if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  908:            {
    #####:  909:                return -1;
        -:  910:            }
        -:  911:
    #####:  912:            for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  913:            {
    #####:  914:                if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  915:                {
    #####:  916:                    j++;
        -:  917:                }
        -:  918:            }
    #####:  919:            if (j < choice2)
branch  0 never executed
branch  1 never executed
        -:  920:            {
    #####:  921:                return -1;				
        -:  922:            }
        -:  923:
        -:  924:            if (DEBUG) 
        -:  925:                printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  926:
        -:  927:            //increase supply count for choosen card by amount being discarded
    #####:  928:            state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  929:
        -:  930:            //each other player gains a copy of revealed card
    #####:  931:            for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  932:            {
    #####:  933:                if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  934:                {
    #####:  935:                    gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -:  936:                }
        -:  937:            }
        -:  938:
        -:  939:            //discard played card from hand
    #####:  940:            discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -:  941:
        -:  942:            //trash copies of cards returned to supply
    #####:  943:            for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -:  944:            {
    #####:  945:                for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  946:                {
    #####:  947:                    if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -:  948:                    {
    #####:  949:                        discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####:  950:                        break;
        -:  951:                    }
        -:  952:                }
        -:  953:            }			
        -:  954:
    #####:  955:            return 0;
        -:  956:
        -:  957:        case cutpurse:
        -:  958:
    #####:  959:            updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  960:            for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  961:            {
    #####:  962:                if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  963:                {
    #####:  964:                    for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -:  965:                    {
    #####:  966:                        if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -:  967:                        {
    #####:  968:                            discardCard(j, i, state, 0);
call    0 never executed
    #####:  969:                            break;
        -:  970:                        }
    #####:  971:                        if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -:  972:                        {
    #####:  973:                            for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -:  974:                            {
        -:  975:                                if (DEBUG)
        -:  976:                                    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  977:                            }	
    #####:  978:                            break;
        -:  979:                        }		
        -:  980:                    }
        -:  981:
        -:  982:                }
        -:  983:
        -:  984:            }				
        -:  985:
        -:  986:            //discard played card from hand
    #####:  987:            discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -:  988:
    #####:  989:            return 0;
        -:  990:
        -:  991:        case outpost:
        -:  992:            //set outpost flag
    #####:  993:            state->outpostPlayed++;
        -:  994:
        -:  995:            //discard card
    #####:  996:            discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  997:            return 0;
        -:  998:
        -:  999:        case salvager:
        -: 1000:            //+1 buy
    #####: 1001:            state->numBuys++;
        -: 1002:
    #####: 1003:            if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1004:            {
        -: 1005:                //gain coins equal to trashed card
    #####: 1006:                state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1007:                //trash card
    #####: 1008:                discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1009:            }
        -: 1010:
        -: 1011:            //discard card
    #####: 1012:            discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1013:            return 0;
        -: 1014:
        -: 1015:        case treasure_map:
        -: 1016:            //search hand for another treasure_map
    #####: 1017:            index = -1;
    #####: 1018:            for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1019:            {
    #####: 1020:                if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1021:                {
    #####: 1022:                    index = i;
    #####: 1023:                    break;
        -: 1024:                }
        -: 1025:            }
    #####: 1026:            if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1027:            {
        -: 1028:                //trash both treasure cards
    #####: 1029:                discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1030:                discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1031:
        -: 1032:                //gain 4 Gold cards
    #####: 1033:                for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1034:                {
    #####: 1035:                    gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1036:                }
        -: 1037:
        -: 1038:                //return success
    #####: 1039:                return 1;
        -: 1040:            }
        -: 1041:
        -: 1042:            //no second treasure_map found in hand
    #####: 1043:            return -1;
        -: 1044:    }
        -: 1045:
    #####: 1046:    return -1;
        -: 1047:}
        -: 1048:
function discardCard called 33 returned 100% blocks executed 100%
       33: 1049:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1050:{
        -: 1051:
        -: 1052:    //if card is not trashed, added to Played pile 
       33: 1053:    if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1054:    {
        -: 1055:        //add card to played pile
       33: 1056:        state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       33: 1057:        state->playedCardCount++;
        -: 1058:    }
        -: 1059:
        -: 1060:    //set played card to -1
       33: 1061:    state->hand[currentPlayer][handPos] = -1;
        -: 1062:
        -: 1063:    //remove card from player's hand
       33: 1064:    if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 12% (fallthrough)
branch  1 taken 88%
        -: 1065:    {
        -: 1066:        //reduce number of cards in hand
        4: 1067:        state->handCount[currentPlayer]--;
        -: 1068:    }
       29: 1069:    else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
        -: 1070:    {
        -: 1071:        //reduce number of cards in hand
        4: 1072:        state->handCount[currentPlayer]--;
        -: 1073:    }
        -: 1074:    else 	
        -: 1075:    {
        -: 1076:        //replace discarded card with last card in hand
       25: 1077:        state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1078:        //set last card to -1
       25: 1079:        state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1080:        //reduce number of cards in hand
       25: 1081:        state->handCount[currentPlayer]--;
        -: 1082:    }
        -: 1083:
       33: 1084:    return 0;
        -: 1085:}
        -: 1086:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1087:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1088:{
        -: 1089:    //Note: supplyPos is enum of choosen card
        -: 1090:
        -: 1091:    //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1092:    if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1093:    {
    #####: 1094:        return -1;
        -: 1095:    }
        -: 1096:
        -: 1097:    //added card for [whoseTurn] current player:
        -: 1098:    // toFlag = 0 : add to discard
        -: 1099:    // toFlag = 1 : add to deck
        -: 1100:    // toFlag = 2 : add to hand
        -: 1101:
    #####: 1102:    if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1103:    {
    #####: 1104:        state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1105:        state->deckCount[player]++;
        -: 1106:    }
    #####: 1107:    else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1108:    {
    #####: 1109:        state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1110:        state->handCount[player]++;
        -: 1111:    }
        -: 1112:    else
        -: 1113:    {
    #####: 1114:        state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1115:        state->discardCount[player]++;
        -: 1116:    }
        -: 1117:
        -: 1118:    //decrease number in supply pile
    #####: 1119:    state->supplyCount[supplyPos]--;
        -: 1120:
    #####: 1121:    return 0;
        -: 1122:}
        -: 1123:
function updateCoins called 67 returned 100% blocks executed 82%
       67: 1124:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1125:{
        -: 1126:    int i;
        -: 1127:
        -: 1128:    //reset coin count
       67: 1129:    state->coins = 0;
        -: 1130:
        -: 1131:    //add coins for each Treasure card in player's hand
      402: 1132:    for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1133:    {
      335: 1134:        if (state->hand[player][i] == copper)
branch  0 taken 69% (fallthrough)
branch  1 taken 31%
        -: 1135:        {
      231: 1136:            state->coins += 1;
        -: 1137:        }
      104: 1138:        else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1139:        {
    #####: 1140:            state->coins += 2;
        -: 1141:        }
      104: 1142:        else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1143:        {
    #####: 1144:            state->coins += 3;
        -: 1145:        }	
        -: 1146:    }	
        -: 1147:
        -: 1148:    //add bonus
       67: 1149:    state->coins += bonus;
        -: 1150:
       67: 1151:    return 0;
        -: 1152:}
        -: 1153:
        -: 1154:/****************************************
        -: 1155: * refactoring begins here
        -: 1156: * *************************************/
        -: 1157:
        -: 1158:/****************************************
        -: 1159: * Function: playAdventurer()
        -: 1160: * Parameters: int, struct gameState, int
        -: 1161: * Description: play the adventurer card's effect
        -: 1162: * draws cards from the player's deck until 2 treasure cards are in hand
        -: 1163: * Precondition: pass valid player int, initialized gameState, and handPos of the
        -: 1164: * played card
        -: 1165: * Postcondition: 2 treasure added to current player's hand, all other cards
        -: 1166: * drawn from deck discarded into played pile
        -: 1167: *  ************************************/
function playAdventurer called 11 returned 100% blocks executed 100%
       11: 1168:int playAdventurer(int currentPlayer, struct gameState *state, int handPos){
        -: 1169:    int cardDrawn,
       11: 1170:        z=0,
       11: 1171:        drawntreasure=0;
        -: 1172:
        -: 1173:    int temphand[MAX_HAND];
        -: 1174:
       81: 1175:    while(drawntreasure<2){
branch  0 taken 84%
branch  1 taken 16% (fallthrough)
        -: 1176:        //if the deck is empty we need to shuffle discard and add to deck
       59: 1177:        if (state->deckCount[currentPlayer] <1){
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
        3: 1178:            shuffle(currentPlayer, state);
call    0 returned 100%
        -: 1179:        }
       59: 1180:        drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1181:        //top card of hand is most recently drawn card.
       59: 1182:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];
       59: 1183:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 63% (fallthrough)
branch  1 taken 37%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
       22: 1184:            drawntreasure++;
        -: 1185:        else{
       37: 1186:            temphand[z]=cardDrawn;
        -: 1187:
        -: 1188:            //this should just remove the top card (the most recently drawn one).
       37: 1189:            state->handCount[currentPlayer]--;
       37: 1190:            z++;
        -: 1191:        }
        -: 1192:    }
        -: 1193:    /*$$*/
       11: 1194:    state->handCount[currentPlayer]++;
       59: 1195:    while(z-1>=0){
branch  0 taken 77%
branch  1 taken 23% (fallthrough)
       37: 1196:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
       37: 1197:        z=z-1;
        -: 1198:    }
        -: 1199:
       11: 1200:    return 0;
        -: 1201:}
        -: 1202:
        -: 1203:/****************************************
        -: 1204: * Function: playSmithy()
        -: 1205: * Parameters: int, struct gameState, int
        -: 1206: * Description: Plays the smithy card's effect. Player draws an additional 3 cards
        -: 1207: * Preconditions: passed current player int, passed valid gameState, and handPos of
        -: 1208: * the smithy card
        -: 1209: * Postconditions: Player has 3 additional cards in their hand
        -: 1210: * *************************************/
        -: 1211:
function playSmithy called 3 returned 100% blocks executed 100%
        3: 1212:int playSmithy(int currentPlayer, struct gameState *state, int handPos){
        -: 1213:    int i;
        -: 1214:    //+3 Cards
        -: 1215:    /*$$*/
       15: 1216:    for (i = 0; i <= 3; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -: 1217:    {
       12: 1218:        drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1219:    }
        -: 1220:    //discard card from hand
        3: 1221:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        3: 1222:    discardCard(handPos-1, currentPlayer, state, 0);
call    0 returned 100%
        3: 1223:    return 0;
        -: 1224:}
        -: 1225:
        -: 1226:/****************************************
        -: 1227: * Function: playCouncilRoom
        -: 1228: * Parameters: int, struct gameState, int 
        -: 1229: * Description: Plays the council room card effect. gets 4 additional cards,
        -: 1230: * 1 additional buy.  All other players draw a card as well
        -: 1231: * Preconditions: passed current player int, passed valid gameState, and handPos of
        -: 1232: * Postconditions: players have the additional cards as stated. current player
        -: 1233: * has 1 additional buy
        -: 1234: * *************************************/
function playCouncilRoom called 0 returned 0% blocks executed 0%
    #####: 1235:int playCouncilRoom(int currentPlayer, struct gameState *state, int handPos){
        -: 1236:    int i;
        -: 1237:    //+4 Cards
    #####: 1238:    for (i = 0; i < 4; i++){
branch  0 never executed
branch  1 never executed
    #####: 1239:        drawCard(currentPlayer, state);
call    0 never executed
        -: 1240:    }
        -: 1241:
        -: 1242:    //+1 Buy
    #####: 1243:    state->numBuys++;
        -: 1244:
        -: 1245:    //Each other player draws a card
    #####: 1246:    for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1247:        if ( i != currentPlayer ) {
branch  0 never executed
branch  1 never executed
    #####: 1248:            drawCard(i, state);
call    0 never executed
        -: 1249:        }
        -: 1250:    }
        -: 1251:    //put played card in played card pile
    #####: 1252:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1253:    return 0;
        -: 1254:}
        -: 1255:
        -: 1256:
        -: 1257:/****************************************
        -: 1258: * Function: playFeast
        -: 1259: * Parameters: int, struct gameState, int
        -: 1260: * Description: Player gets to gain a card valued up to 5 treasure
        -: 1261: * Play the feast card effect
        -: 1262: * Preconditions: pass valid parameters.
        -: 1263: * Postconditions: player has bought a new card worth 5 treasure
        -: 1264: * *************************************/
function playFeast called 0 returned 0% blocks executed 0%
    #####: 1265:int playFeast(int currentPlayer, struct gameState *state, int choice1){
        -: 1266:    int i, x;
        -: 1267:    int temphand[MAX_HAND];
        -: 1268:    //gain card with cost up to 5
        -: 1269:    //Backup hand
    #####: 1270:    for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1271:        temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1272:        state->hand[currentPlayer][i] = -1;//Set to nothing
        -: 1273:    }
        -: 1274:    //Backup hand
        -: 1275:
        -: 1276:    //Update Coins for Buy
    #####: 1277:    updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####: 1278:    x = 1;//Condition to loop on
    #####: 1279:    while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####: 1280:        if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1281:            if (DEBUG)
        -: 1282:                printf("None of that card left, sorry!\n");
        -: 1283:
        -: 1284:            if (DEBUG){
        -: 1285:                printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1286:            }
        -: 1287:        }
    #####: 1288:        else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1289:            printf("That card is too expensive!\n");
call    0 never executed
        -: 1290:
        -: 1291:            if (DEBUG){
        -: 1292:                printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1293:            }
        -: 1294:        }
        -: 1295:        else{
        -: 1296:
        -: 1297:            if (DEBUG){
        -: 1298:                printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1299:            }
        -: 1300:
    #####: 1301:            gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####: 1302:            x = 0;//No more buying cards
        -: 1303:
        -: 1304:            if (DEBUG){
        -: 1305:                printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1306:            }
        -: 1307:
        -: 1308:        }
        -: 1309:    }     
        -: 1310:    //Reset Hand
    #####: 1311:    for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1312:        state->hand[currentPlayer][i] = temphand[i];
    #####: 1313:        temphand[i] = -1;
        -: 1314:    }
        -: 1315:    //Reset Hand
    #####: 1316:    return 0;
        -: 1317:}
        -: 1318:
        -: 1319:/****************************************
        -: 1320: * Function: playGardens()
        -: 1321: * Parameters: none
        -: 1322: * Description: Play garden card, has no effect on action only counts during 
        -: 1323: * points counting
        -: 1324: * Preconditions: none
        -: 1325: * Postconditions: none
        -: 1326: * *************************************/
function playGardens called 0 returned 0% blocks executed 0%
    #####: 1327:int playGardens(){
    #####: 1328:    return -1;
        -: 1329:}
        -: 1330:
        -: 1331:/****************************************
        -: 1332: * Function: playEmbargo
        -: 1333: * Parameters: int, struct gameState, int, int, int*
        -: 1334: * Description: embargo effect, validates choice1 and if choice1 is in supply
        -: 1335: * adds embargo token to the supply stack of players choice
        -: 1336: * +2 coins for current player
        -: 1337: * Preconditions: passed valid player, gameState, handPos of embargo card, choice1, and
        -: 1338: * bonus treasure variable
        -: 1339: * Postconditions: card effects take place
        -: 1340: * *************************************/
        -: 1341:
function playEmbargo called 0 returned 0% blocks executed 0%
    #####: 1342:int playEmbargo(int currentPlayer, struct gameState *state, int handPos, int choice1, int *bonus){
        -: 1343:    //+2 Coins
        -: 1344:    //state->coins = state->coins + 2;
    #####: 1345:    *bonus = 2;
        -: 1346:
    #####: 1347:    if (choice1 == -1){
branch  0 never executed
branch  1 never executed
    #####: 1348:        fprintf(stderr, "Invalid. Usage: play embargo [supply#]\n");
call    0 never executed
    #####: 1349:        return -1;
        -: 1350:    }
        -: 1351:
        -: 1352:    //see if selected pile is in play
    #####: 1353:    if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1354:    {
    #####: 1355:        return -1;
        -: 1356:    }
        -: 1357:
        -: 1358:    //add embargo token to selected supply pile
    #####: 1359:    state->embargoTokens[choice1]++;
        -: 1360:
        -: 1361:    //trash card
    #####: 1362:    discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1363:    return 0;
        -: 1364:}
        -: 1365:
        -: 1366:/****************************************
        -: 1367: * Function: playVillage()
        -: 1368: * Parameters: int, struct gameState, int
        -: 1369: * Description: village effect, gives player +1 card and +2 actions
        -: 1370: * Preconditions: passed in int of current player, initialized gameState, and hand
        -: 1371: * position of village card
        -: 1372: * Postconditions: player has +1 card and +2 actions
        -: 1373: * *************************************/
function playVillage called 3 returned 100% blocks executed 100%
        3: 1374:int playVillage(int currentPlayer, struct gameState *state, int handPos){
        -: 1375:    //+1 Card
        3: 1376:    drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1377:    /*$$*/
        3: 1378:   drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1379:
        -: 1380:    //+2 Actions
        3: 1381:    state->numActions = state->numActions + 2;
        -: 1382:
        -: 1383:    //discard played card from hand
        3: 1384:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        3: 1385:    return 0;
        -: 1386:}
        -: 1387:
        -: 1388:/****************************************
        -: 1389: * Function: playSeaHag()
        -: 1390: * Parameters: int, struct gameState
        -: 1391: * Description: sea hag effect, other players discard top card and gain curse
        -: 1392: * Preconditions: current player int passed in, initialized gameState passed in
        -: 1393: * Postconditions: other players affected
        -: 1394: * *************************************/
function playSeaHag called 0 returned 0% blocks executed 0%
    #####: 1395:int playSeaHag(int currentPlayer, struct gameState *state){
        -: 1396:    int i;
    #####: 1397:    for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1398:        if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1399:            state->discard[i][state->discardCount[i]] = 
    #####: 1400:                        state->deck[i][state->deckCount[i]--];
    #####: 1401:            state->deckCount[i]--;
    #####: 1402:            state->discardCount[i]++;
    #####: 1403:            state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1404:        }
        -: 1405:    }
    #####: 1406:    return 0;
        -: 1407:}
        -: 1408:
        -: 1409:/****************************************
        -: 1410: * Function: playMinion
        -: 1411: * Parameters:, int, gameState, int, int, int, int*
        -: 1412: * Description: minion effect, +1 action, +2 coins or redraw 4 cards, 
        -: 1413: * other players discard hand
        -: 1414: * if more than 4 cards and redraw 4
        -: 1415: * Preconditions: passed valid: current player int, gameState, hand position minion
        -: 1416: * played from, choice1, choice2, and pointer to bonus coin variable
        -: 1417: * *************************************/
function playMinion called 4 returned 100% blocks executed 100%
        4: 1418:int playMinion(int currentPlayer, struct gameState *state, int handPos, 
        -: 1419:               int choice1, int choice2, int *bonus){
        -: 1420:    int i, j;
        -: 1421:
        -: 1422:    //+1 action
        4: 1423:    state->numActions++;
        -: 1424:
        -: 1425:    //discard card from hand
        4: 1426:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -: 1427:    // +2 coins
        4: 1428:    if (choice1) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -: 1429:        //state->coins = state->coins + 2;
        2: 1430:        *bonus = 2;
        -: 1431:    }
        -: 1432:    //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1433:    /*$$*/
        4: 1434:    if (choice2){
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -: 1435:        //discard hand
       14: 1436:        while(numHandCards(state) > 0) {
call    0 returned 100%
branch  1 taken 83%
branch  2 taken 17% (fallthrough)
       10: 1437:            discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -: 1438:        }
        -: 1439:        //draw 4
       10: 1440:        for (i = 0; i < 4; i++) {
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        8: 1441:            drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1442:        }
        -: 1443:        //other players discard hand and redraw if hand size > 4
        8: 1444:        for (i = 0; i < state->numPlayers; i++) {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        6: 1445:            if (i != currentPlayer) {
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        4: 1446:                if ( state->handCount[i] > 4 ) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -: 1447:                    //discard hand
       14: 1448:                    while( state->handCount[i] > 0 ) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       10: 1449:                        discardCard(handPos, i, state, 0);
call    0 returned 100%
        -: 1450:                    }
        -: 1451:                    //draw 4
       10: 1452:                    for (j = 0; j < 4; j++) {
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        8: 1453:                        drawCard(i, state);
call    0 returned 100%
        -: 1454:                    }
        -: 1455:                }
        -: 1456:            }
        -: 1457:        }
        -: 1458:    }
        4: 1459:    return 0;
        -: 1460:}
        -: 1461:
        -: 1462:
        -: 1463://end of dominion.c
        -: 1464:
